#include "tralics/Parser.h"

Hashtab::Hashtab() {
    frozen_undef_token = nohash_primitive("undefined", CmdChr(undef_cmd, zero_code));
    temp_token         = nohash_primitive("temp", CmdChr(undef_cmd, zero_code));
    endv_token         = nohash_primitive("endv", CmdChr(endv_cmd, zero_code));
    frozen_protection  = nohash_primitive("frozen_cs", CmdChr(undef_cmd, zero_code));
    frozen_endcsname   = nohash_primitive("endcsname", CmdChr(endcsname_cmd, zero_code));
    iterate_token      = nohash_primitive("iterate", CmdChr(undef_cmd, zero_code));
    frozen_relax_token = nohash_primitive("relax", CmdChr(relax_cmd, relax_code));
    eof_token          = nohash_primitive("eof", CmdChr(eof_marker_cmd, zero_code));

    // now all tokens, in the order of their command codes.
    primitive("part", section_cmd, part_code);
    primitive("chapter", section_cmd, chapter_code);
    primitive("endsec", section_cmd, endsec_code);
    primitive("section", section_cmd, section_code);
    primitive("subsection", section_cmd, subsection_code);
    primitive("subsubsection", section_cmd, subsubsection_code);
    primitive("paragraph", section_cmd, paragraph_code);
    primitive("subparagraph", section_cmd, subparagraph_code);
    primitive("toplevelsection", section_cmd, toplevel_sec_code);
    label_token = primitive("label", label_cmd);
    primitive("anchor", label_cmd, one_code);
    primitive("anchorlabel", label_cmd, two_code);
    ref_token = primitive("ref", ref_cmd);
    primitive("pageref", ref_cmd, one_code);
    primitive("XMLref", eqref_cmd);
    par_token      = primitive("par", par_cmd);
    noindent_token = primitive("noindent", start_par_cmd, zero_code);
    primitive("indent", start_par_cmd, one_code);
    endcsname_token = primitive("endcsname", endcsname_cmd);
    primitive("multicolumn", multicolumn_cmd);
    frozen_dont_expand = nohash_primitive("notexpanded:", CmdChr(dont_expand_cmd, zero_code));
    atbd_token         = primitive("AtBeginDocument", atdocument_cmd, zero_code);
    primitive("AtEndDocument", atdocument_cmd, one_code);
    primitive("fvset", fvset_cmd);
    calc_token = primitive("calc ", calc_cmd); // command name ends with space
    primitive("bibliography", biblio_cmd);
    primitive("aparaitre", aparaitre_cmd);
    primitive("toappear", aparaitre_cmd);
    primitive("citation", citation_cmd);
    primitive("endcitation", end_citation_cmd);
    primitive("thebibliography", thebibliography_cmd);
    primitive("endthebibliography", end_thebibliography_cmd);
    primitive("bpers", bpers_cmd);
    primitive("cititem", cititem_cmd);
    primitive("bibitem", bibitem_cmd);
    primitive("bibitem@empty", bibitem_cmd, one_code);
    primitive("cite", cite_cmd, cite_code);
    primitive("XMLsolvecite", solvecite_cmd);
    primitive("nocite", cite_cmd, nocite_code);
    primitive("natcite", cite_cmd, natcite_code);
    citeone_token     = primitive("cite@one", cite_one_cmd);
    citesimple_token  = primitive("cite@simple", cite_one_cmd, one_code);
    end_natcite_token = nohash_primitive("endnatcite", CmdChr(cite_cmd, natcite_e_code));
    primitive("omitcite", omitcite_cmd);
    primitive("bauthors", bib_cmd, zero_code);
    primitive("beditors", bib_cmd, one_code);
    primitive("\\", backslash_cmd);
    primitive("newline", backslash_cmd, one_code); // idem
    primitive("hline", hline_cmd);
    primitive("cline", hline_cmd, one_code);
    primitive("hlinee", hline_cmd, two_code);
    primitive("smallskip", skip_cmd, smallskip_code);
    primitive("medskip", skip_cmd, medskip_code);
    primitive("bigskip", skip_cmd, bigskip_code);
    primitive("hfil", hfill_cmd, hfil_code);
    primitive("hfill", hfill_cmd, hfill_code);
    primitive("vfil", vfill_cmd, vfil_code);
    primitive("vfill", vfill_cmd, vfill_code);
    primitive("hfilneg", hfill_cmd, hfilneg_code);
    primitive("vss", vfill_cmd, vss_code);
    primitive("vfilneg", vfill_cmd, vfilneg_code);
    primitive("hss", hfill_cmd, hss_code);
    primitive("rm", oldfont_cmd, rm_family_code);
    primitive("sf", oldfont_cmd, sf_family_code);
    primitive("tt", oldfont_cmd, tt_family_code);
    primitive("bf", oldfont_cmd, bf_series_code);
    primitive("it", oldfont_cmd, it_shape_code);
    primitive("sc", oldfont_cmd, sc_shape_code);
    primitive("sl", oldfont_cmd, sl_shape_code);

    primitive("textrm", argfont_cmd, rm_family_code);
    primitive("textsf", argfont_cmd, sf_family_code);
    primitive("texttt", argfont_cmd, tt_family_code);
    primitive("textmd", argfont_cmd, md_series_code);
    primitive("textbf", argfont_cmd, bf_series_code);
    primitive("textup", argfont_cmd, up_shape_code);
    primitive("textit", argfont_cmd, it_shape_code);
    primitive("textsl", argfont_cmd, sl_shape_code);
    primitive("textsc", argfont_cmd, sc_shape_code);
    primitive("emph", argfont_cmd, em_code);
    primitive("textnormal", argfont_cmd, normalfont_code);

    primitive("rmfamily", noargfont_cmd, rm_family_code);
    primitive("sffamily", noargfont_cmd, sf_family_code);
    primitive("ttfamily", noargfont_cmd, tt_family_code);
    primitive("mdseries", noargfont_cmd, md_series_code);
    primitive("bfseries", noargfont_cmd, bf_series_code);
    primitive("upshape", noargfont_cmd, up_shape_code);
    primitive("itshape", noargfont_cmd, it_shape_code);
    primitive("slshape", noargfont_cmd, sl_shape_code);
    primitive("scshape", noargfont_cmd, sc_shape_code);
    primitive("em", noargfont_cmd, em_code);
    primitive("normalfont", noargfont_cmd, normalfont_code);
    primitive("Tiny", fontsize_cmd, Tiny_code);
    primitive("tiny", fontsize_cmd, tiny_code);
    primitive("SMALL", fontsize_cmd, scriptsize_code);
    primitive("scriptsize", fontsize_cmd, scriptsize_code);
    primitive("footnotesize", fontsize_cmd, footnotesize_code);
    primitive("Small", fontsize_cmd, footnotesize_code);
    primitive("small", fontsize_cmd, small_code);
    primitive("normalsize", fontsize_cmd, normalsize_code);
    primitive("large", fontsize_cmd, large_code);
    primitive("Large", fontsize_cmd, Large_code);
    primitive("LARGE", fontsize_cmd, LARGE_code);
    primitive("huge", fontsize_cmd, huge_code);
    primitive("Huge", fontsize_cmd, Huge_code);
    primitive("item", item_cmd);
    primitive("@@item", item_cmd);
    primitive("@item", item_cmd, one_code);
    primitive("tralics@find@config", get_config_cmd);
    primitive("tralics@get@config", get_config_cmd, one_code);
    primitive("documentclass", doc_class_cmd);
    primitive("LoadClass", doc_class_cmd, one_code);
    primitive("@ifclassloaded", if_package_loaded_cmd, zero_code);
    primitive("@ifpackageloaded", if_package_loaded_cmd, one_code);
    primitive("@ifclasslater", if_package_later_cmd, zero_code);
    primitive("@ifpackagelater", if_package_later_cmd, one_code);
    primitive("@ifclasswith", if_package_with_cmd, zero_code);
    primitive("@ifpackagewith", if_package_with_cmd, one_code);
    primitive("ProvidesFile", provides_package_cmd, zero_code);
    primitive("ProvidesPackage", provides_package_cmd, one_code);
    primitive("ProvidesClass", provides_package_cmd, two_code);
    primitive("PassOptionsToClass", pass_options_cmd, zero_code);
    primitive("PassOptionsToPackage", pass_options_cmd, one_code);
    primitive("DeclareOption", declare_options_cmd);
    primitive("OptionNotUsed", options_not_used_cmd);
    primitive("ProcessOptions", process_options_cmd);
    primitive("ExecuteOptions", execute_options_cmd);
    primitive("AtEndOfPackage", at_end_of_class_cmd, one_code);
    primitive("AtEndOfClass", at_end_of_class_cmd, zero_code);
    primitive("LoadClassWithOptions", load_with_options_cmd, zero_code);
    primitive("RequirePackageWithOptions", load_with_options_cmd, one_code);
    primitive("InputClass", inputclass_cmd); // hack
    primitive("usepackage", package_cmd);
    primitive("RequirePackage", package_cmd);
    primitive("NeedsTeXFormat", needs_format_cmd);
    primitive("subfigure", subfigure_cmd);
    primitive("pop@stack", pop_stack_cmd);
    primitive("mbox", box_cmd, mbox_code);
    primitive("makebox", box_cmd, makebox_code);
    primitive("text", box_cmd, text_code);
    primitive("textsuperscript", sub_cmd, zero_code);
    primitive("textsubscript", sub_cmd, one_code);
    primitive("oldstylenums", sub_cmd, two_code);
    primitive("soul@caps", soul_cmd, soul_caps_code);
    primitive("soul@hl", soul_cmd, soul_hl_code);
    primitive("soul@so", soul_cmd, soul_so_code);
    primitive("soul@st", soul_cmd, soul_st_code);
    primitive("soul@ul", soul_cmd, soul_ul_code);
    primitive("mathord", math_comp_cmd, ord_noad);
    mathop_token = primitive("mathop", math_comp_cmd, op_noad);
    primitive("mathbin", math_comp_cmd, bin_noad);
    primitive("mathrel", math_comp_cmd, rel_noad);
    primitive("mathopen", math_comp_cmd, open_noad);
    primitive("mathclose", math_comp_cmd, close_noad);
    primitive("mathpunct", math_comp_cmd, punct_noad);
    primitive("mathinner", math_comp_cmd, inner_noad);
    primitive("mathbetween", math_comp_cmd, between_noad);
    primitive("big", big_cmd, big_code);
    primitive("Big", big_cmd, Big_code);
    primitive("bigg", big_cmd, bigg_code);
    primitive("Bigg", big_cmd, Bigg_code);
    primitive("bigl", big_cmd, bigl_code);
    primitive("Bigl", big_cmd, Bigl_code);
    primitive("biggl", big_cmd, biggl_code);
    primitive("Biggl", big_cmd, Biggl_code);
    primitive("bigr", big_cmd, bigr_code);
    primitive("Bigr", big_cmd, Bigr_code);
    primitive("biggr", big_cmd, biggr_code);
    primitive("Biggr", big_cmd, Biggr_code);
    primitive("bigm", big_cmd, bigm_code);
    primitive("Bigm", big_cmd, Bigm_code);
    primitive("biggm", big_cmd, biggm_code);
    primitive("Biggm", big_cmd, Biggm_code);
    genfrac_mode[0] = primitive("displaystyle", style_cmd, displaystyle_code);
    genfrac_mode[1] = primitive("textstyle", style_cmd, textstyle_code);
    genfrac_mode[2] = primitive("scriptstyle", style_cmd, scriptstyle_code);
    genfrac_mode[3] = primitive("scriptscriptstyle", style_cmd, scriptscriptstyle_code);
    primitive("displaylimits", limits_cmd);
    limits_token = primitive("limits", limits_cmd, two_code);
    primitive("nolimits", limits_cmd, one_code);
    ensuremath_token = primitive("ensuremath", ensuremath_cmd);
    primitive("linebreak", linebreak_cmd, linebreak_code);
    primitive("nolinebreak", linebreak_cmd, nolinebreak_code);
    primitive("pagebreak", linebreak_cmd, pagebreak_code);
    primitive("nopagebreak", linebreak_cmd, nopagebreak_code);
    primitive("url", url_cmd);
    primitive("Href", hanl_cmd, zero_code);
    primitive("@@href@foot", hanl_cmd, one_code);
    primitive("href", hanl_cmd, two_code);
    primitive("@href", hanl_cmd, two_code);
    primitive("AddAttToCurrent", addatt_cmd, addatt_to_cur_code);
    primitive("AddAttToLast", addatt_cmd, addatt_to_last_code);
    primitive("addattributestodocument", addatt_cmd, addatt_to_doc_code);
    primitive("addattributetodocument", addatt_cmd, addatt_to_doc_code);
    primitive("AddAttToDocument", addatt_cmd, addatt_to_doc_code);
    primitive("XMLaddatt", addatt_cmd, addatt_to_code);
    primitive("addattributetoindex", addatt_cmd, addatt_to_index_code);
    primitive("AddAttToIndex", addatt_cmd, addatt_to_index_code);
    primitive("above", over_cmd, above_code);
    primitive("over", over_cmd, over_code);
    primitive("atop", over_cmd, atop_code);
    primitive("abovewithdelims", over_cmd, abovewithdelims_code);
    primitive("overwithdelims", over_cmd, overwithdelims_code);
    primitive("atopwithdelims", over_cmd, atopwithdelims_code);
    begingroup_token = primitive("begingroup", begingroup_cmd, zero_code);
    endgroup_token   = primitive("endgroup", begingroup_cmd, one_code);
    sendgroup_token  = nohash_primitive("endenv", CmdChr(begingroup_cmd, subtypes(2)));
    footnote_token   = primitive("footnote", footnote_cmd);
    primitive("tralics@fnhack", fnhack_cmd);
    primitive("tralics@pop@module", popmodule_cmd);
    primitive("tralics@push@module", pushmodule_cmd);
    primitive("thanks", footnote_cmd);
    primitive("caption", caption_cmd);
    primitive("centering", centering_cmd, center_code);
    primitive("nocentering", centering_cmd, zero_code);
    primitive("raggedleft", centering_cmd, flushright_code);
    primitive("raggedright", centering_cmd, flushleft_code);
    primitive("sbox", save_box_cmd, zero_code);
    primitive("savebox", save_box_cmd, one_code);
    primitive("fbox", fbox_cmd, fbox_code);
    primitive("framebox", fbox_cmd, framebox_code);
    primitive("rotatebox", fbox_cmd, rotatebox_code);
    primitive("scalebox", fbox_cmd, scalebox_code);
    primitive("raisebox", fbox_cmd, raisebox_code);
    primitive("hspace", hspace_cmd, zero_code);
    primitive("vspace", hspace_cmd, one_code);
    primitive("includegraphics", includegraphics_cmd, zero_code);
    primitive("psfig", includegraphics_cmd, one_code);
    primitive("error", error_cmd);
    notprerr_token = primitive("@notprerr", error_cmd, one_code);
    primitive("@glo", glo_cmd);
    primitive("@reevaluate", reevaluate_cmd);
    primitive("xmllatex", xmllatex_cmd);
    primitive("ignorespaces", specimp_cmd, ignorespaces_code);
    primitive("mark", specimp_cmd, mark_code);
    primitive("penalty", specimp_cmd, penalty_code);
    primitive("accent", unimp_cmd, accent_code);
    primitive("delimiter", unimp_cmd, delimiter_code);
    primitive("halign", unimp_cmd, halign_code);
    primitive("insert", unimp_cmd, insert_code);
    primitive("mathaccent", unimp_cmd, mathaccent_code);
    primitive("mathchar", unimp_cmd, mathchar_code);
    primitive("noalign", unimp_cmd, noalign_code);
    primitive("noboundary", unimp_cmd, noboundary_code);
    primitive("nonscript", nonscript_cmd);
    primitive("omit", unimp_cmd, omit_code);
    primitive("radical", unimp_cmd, radical_code);
    primitive("vadjust", unimp_cmd, vadjust_code);
    primitive("valign", unimp_cmd, valign_code);
    primitive("vcenter", unimp_cmd, vcenter_code);
    primitive("span", unimp_cmd, span_code);
    primitive("cr", cr_cmd, cr_code);
    cr_token = primitive("cr ", cr_cmd, mycr_code);
    primitive("crcr", cr_cmd, crcr_code);
    crwithargs_token = primitive("cr withargs", cr_cmd, crwithargs_code);
    primitive("dump", unimp_cmd, dump_code);
    primitive("@@end", specimp_cmd, atatend_code);
    primitive("tralics@abort", specimp_cmd, abort_code);
    primitive("tralics@sleep", specimp_cmd, sleep_code);
    primitive("tralics@prompt", specimp_cmd, prompt_code);
    primitive("tralics@random", random_cmd, one_code);
    primitive("pdfstrcmp", pdfstrcmp_cmd);
    primitive("OT2-encoding", ot2enc_cmd, one_code);
    primitive("OT1-encoding", ot2enc_cmd, two_code);
    primitive("wncyr-encoding", ot2enc_cmd, one_code); // same as above
    primitive("T1-encoding", ot2enc_cmd);
    primitive("stop", specimp_cmd, atatend_code);
    primitive("tralics load latex3", loadlatex3_cmd);
    primitive("message", specimp_cmd, message_code);
    primitive("errmessage", specimp_cmd, errmessage_code);
    primitive("widthof", unimp_cmd, widthof_code);
    primitive("heightof", unimp_cmd, heightof_code);
    primitive("depthof", unimp_cmd, depthof_code);
    primitive("frontmatter", matter_cmd, frontmatter_code);
    primitive("backmatter", matter_cmd, backmatter_code);
    primitive("mainmatter", matter_cmd, mainmatter_code);
    primitive("cgloss@gll", gloss_cmd, zero_code);
    primitive("cgloss@glll", gloss_cmd, one_code);
    primitive("@newindex", index_cmd, newindex_code);
    primitive("index", index_cmd, index_code);
    primitive("glossary", index_cmd, glossary_code);
    primitive("@onlypreamble", only_preamble_cmd);
    primitive("tableofcontents", toc_cmd);
    primitive("listoftables", toc_cmd, one_code);
    primitive("listoffigures", toc_cmd, two_code);
    primitive("mathversion", mathversion_cmd);
    primitive("printindex", index_cmd, printindex_code);
    primitive("printglossary", index_cmd, printglossary_code);
    primitive("makeindex", index_cmd, makeindex_code);
    primitive("makeglossary", index_cmd, makeglossary_code);
    primitive("node", trees_cmd, node_code);
    primitive("nodepoint", trees_cmd, nodepoint_code);
    primitive("nodeconnect", trees_cmd, nodeconnect_code);
    primitive("anodeconnect", trees_cmd, anodeconnect_code);
    primitive("nodecurve", trees_cmd, nodecurve_code);
    primitive("anodecurve", trees_cmd, anodecurve_code);
    primitive("nodebox", trees_cmd, nodebox_code);
    primitive("nodeoval", trees_cmd, nodeoval_code);
    primitive("nodetriangle", trees_cmd, nodetriangle_code);
    primitive("nodecircle", trees_cmd, nodecircle_code);
    primitive("barnodeconnect", trees_cmd, barnodeconnect_code);
    primitive("abarnodeconnect", trees_cmd, abarnodeconnect_code);
    primitive("hskip", scan_glue_cmd, hskip_code);
    primitive("vskip", scan_glue_cmd, vskip_code);
    primitive("mskip", scan_glue_cmd, mskip_code);
    primitive("lowercase", case_shift_cmd, zero_code);
    primitive("uppercase", case_shift_cmd, one_code);
    primitive("MakeLowercase", case_shift_cmd, subtypes(2));
    primitive("MakeUppercase", case_shift_cmd, subtypes(3));
    primitive("@@MakeTextLowercase", case_shift_cmd, subtypes(4));
    primitive("@@MakeTextUppercase", case_shift_cmd, subtypes(5));
    primitive("kern", kern_cmd, zero_code);
    primitive("mkern", kern_cmd, one_code);
    primitive("box", make_box_cmd, box_code);
    primitive("copy", make_box_cmd, copy_code);
    primitive("usebox", make_box_cmd, usebox_code);
    primitive("lastbox", make_box_cmd, lastbox_code);
    primitive("XML@copyA", make_box_cmd, useboxA_code);
    primitive("XML@copyB", make_box_cmd, useboxB_code);
    primitive("XML@fetch", XML_fetch_cmd);
    primitive("vsplit", make_box_cmd, vsplit_code);
    primitive("vtop", make_box_cmd, vtop_code);
    primitive("vbox", make_box_cmd, vbox_code);
    primitive("hbox", make_box_cmd, hbox_code);
    primitive("xbox", make_box_cmd, xbox_code);
    primitive("parbox", make_box_cmd, parbox_code);
    primitive("marginpar", make_box_cmd, marginpar_code);
    primitive("XML@moveAB", XML_swap_cmd, zero_code);
    primitive("XML@moveBA", XML_swap_cmd, one_code);
    primitive("XML@swapAB", XML_swap_cmd, two_code);
    char_token = primitive("char", char_num_cmd, zero_code);
    // constants  (non math)
    tilda_token = primitive("nobreakspace", nobreakspace_cmd);
    primitive("textasciicircum", specchar_cmd, subtypes(0x2303));
    primitive("og", cst_cmd, guillemet_og_code);
    primitive("fg", cst_cmd, guillemet_fg_code);

    textvisiblespace_token = primitive("textvisiblespace", specchar_cmd, subtypes(0x2423));

    primitive("textquotestraightbase", unimp_cmd, textquotestraightbase_code);
    primitive("textquotestraightdblbase", unimp_cmd, textquotestraightdblbase_code);
    primitive("textlbrackdbl", unimp_cmd, textlbrackdbl_code);
    primitive("textrbrackdbl", unimp_cmd, textrbrackdbl_code);
    primitive("textcompwordmark", unimp_cmd, textcompwordkmark_code);
    primitive("texttildelow", unimp_cmd, texttildelow_code);
    primitive("textcentoldstyle", unimp_cmd, textcentoldstyle_code);
    primitive("textdollaroldstyle", unimp_cmd, textdollaroldstyle_code);
    primitive("textcopyleft", unimp_cmd, textcopyleft_code);
    primitive("textzerooldstyle", unimp_cmd, textzerooldstyle_code);
    primitive("textoneoldstyle", unimp_cmd, textoneoldstyle_code);
    primitive("texttwooldstyle", unimp_cmd, texttwooldstyle_code);
    primitive("textthreeoldstyle", unimp_cmd, textthreeoldstyle_code);
    primitive("textfouroldstyle", unimp_cmd, textfouroldstyle_code);
    primitive("textfiveoldstyle", unimp_cmd, textfiveoldstyle_code);
    primitive("textsixoldstyle", unimp_cmd, textsixoldstyle_code);
    primitive("textsevenoldstyle", unimp_cmd, textsevenoldstyle_code);
    primitive("texteightoldstyle", unimp_cmd, texteightoldstyle_code);
    primitive("textnineoldstyle", unimp_cmd, textnineoldstyle_code);

    primitive("textcapitalcompwordmark", unimp_cmd, textcapitalcompwordmark_code);
    primitive("textguarani", unimp_cmd, textguarani_code);
    primitive("textleaf", unimp_cmd, textleaf_code);
    primitive("textdied", unimp_cmd, textdied_code);
    primitive("textdivorced", unimp_cmd, textdivorced_code);
    primitive("textblank", unimp_cmd, textblank_code);
    primitive("textborn", unimp_cmd, textborn_code);
    primitive("textmarried", unimp_cmd, textmarried_code);
    primitive("textdblhyphen", unimp_cmd, textdblhyphen_code);
    primitive("textascendercompwordmark", unimp_cmd, textascendercompwordmark_code);
    primitive("textinterrobangdown", unimp_cmd, textinterrobangdown_code);
    primitive("textdiscount", unimp_cmd, textdiscount_code);
    primitive("textquotesingle", char_given_cmd, subtypes('\''));
    apostrophe_token = primitive("apostrophe", char_given_cmd, subtypes(0xB4));
    primitive("textless", specchar_cmd, subtypes('<'));
    primitive("textgreater", specchar_cmd, subtypes('>'));
    primitive("DeclareTextCommand", unimp_font_cmd, DeclareTextCommand_code);
    primitive("ProvideTextCommand", unimp_font_cmd, ProvideTextCommand_code);
    primitive("ProvideTextCommandDefault", unimp_font_cmd, ProvideTextCommandDefault_code);
    primitive("DeclareTextCompositeCommand", unimp_font_cmd, DeclareTextCompositeCommand_code);
    primitive("DeclareTextComposite", unimp_font_cmd, DeclareTextComposite_code);
    primitive("DeclareTextAccent", unimp_font_cmd, DeclareTextAccent_code);
    primitive("UseTextAccent", unimp_font_cmd, UseTextAccent_code);
    primitive("DeclareTextCommandDefault", unimp_font_cmd, DeclareTextCommandDefault_code);
    primitive("ProvideTextCommandDefault", unimp_font_cmd, ProvideTextCommandDefault_code);
    primitive("TextSymbolUnavailable", unimp_font_cmd, TextSymbolUnavailable_code);
    primitive("DeclareTextSymbol", unimp_font_cmd, DeclareTextSymbol_code);
    primitive("DeclareTextSymbolDefault", unimp_font_cmd, DeclareTextSymbolDefault_code);
    primitive("UseTextSymbol", unimp_font_cmd, UseTextSymbol_code);
    primitive("UndeclareTextCommand", unimp_font_cmd, UndeclareTextCommand_code);
    primitive("DeclareFontShape", unimp_font_cmd, DeclareFontShape_code);
    primitive("DeclareFixedFont", unimp_font_cmd, DeclareFixedFont_code);
    primitive("DeclareFontFamily", unimp_font_cmd, DeclareFontFamily_code);
    primitive("DeclareFontEncoding", unimp_font_cmd, DeclareFontEncoding_code);
    primitive("DeclareFontSubstitution", unimp_font_cmd, DeclareFontSubstitution_code);
    primitive("DeclareFontEncodingDefaults", unimp_font_cmd, DeclareFontEncodingDefaults_code);
    primitive("DeclarePreloadSizes", unimp_font_cmd, DeclarePreloadSizes_code);
    primitive("DeclareMathSizes", unimp_font_cmd, DeclareMathSizes_code);
    primitive("DeclareErrorFont", unimp_font_cmd, DeclareErrorFont_code);
    primitive("DeclareSizeFunction", unimp_font_cmd, DeclareSizeFunction_code);
    primitive("DeclareMathVersion", unimp_font_cmd, DeclareMathVersion_code);
    primitive("DeclareSymbolFont", unimp_font_cmd, DeclareSymbolFont_code);
    primitive("SetSymbolFont", unimp_font_cmd, SetSymbolFont_code);
    primitive("DeclareMathAlphabet", unimp_font_cmd, DeclareMathAlphabet_code);
    primitive("SetMathAlphabet", unimp_font_cmd, SetMathAlphabet_code);
    primitive("DeclareMathAccent", unimp_font_cmd, DeclareMathAccent_code);
    primitive("DeclareMathSymbol", unimp_font_cmd, DeclareMathSymbol_code);
    primitive("DeclareMathDelimiter", unimp_font_cmd, DeclareMathDelimiter_code);
    primitive("DeclareMathRadical", unimp_font_cmd, DeclareMathRadical_code);
    primitive("DeclareSymbolFontAlphabet", unimp_font_cmd, DeclareSymbolFontAlphabet_code);
    primitive("DeclareTextFontCommand", unimp_font_cmd, DeclareTextFontCommand_code);
    primitive("DeclareOldFontCommand", unimp_font_cmd, DeclareOldFontCommand_code);
    primitive("@setsize", unimp_font_cmd, setsize_code);
    // Moved here and added 2006-10-07
    primitive("textbar", specchar_cmd, subtypes('|'));
    primitive("textunderscore", specchar_cmd, subtypes(0x5F));
    primitive("textbraceleft", specchar_cmd, subtypes(0x7B));
    primitive("textbraceright", specchar_cmd, subtypes(0x7D));
    primitive("textasciitilde", specchar_cmd, subtypes(0x7E));
    primitive("textexclamdown", specchar_cmd, subtypes(0xA1));
    primitive("textcent", specchar_cmd, subtypes(0xA2));
    primitive("textsterling", specchar_cmd, subtypes(0xA3));
    primitive("textcurrency", specchar_cmd, subtypes(0xA4));
    primitive("textyen", specchar_cmd, subtypes(0xA5));
    primitive("textbrokenbar", specchar_cmd, subtypes(0xA6));
    primitive("S", char_given_cmd, subtypes(0xA7));
    primitive("textsection", specchar_cmd, subtypes(0xA7));
    primitive("textasciidieresis", specchar_cmd, subtypes(0xA8));
    primitive("textcopyright", specchar_cmd, subtypes(0xA9));
    primitive("copyright", specchar_cmd, subtypes(0xA9));
    primitive("textordfeminine", specchar_cmd, subtypes(0xAA));
    primitive("guillemotleft", specchar_cmd, subtypes(0xAB));
    primitive("textlnot", specchar_cmd, subtypes(0xAC));
    primitive("textsofthyphen", specchar_cmd, subtypes(0xAD));
    primitive("textregistered", specchar_cmd, subtypes(0xAE));
    primitive("textasciimacron", specchar_cmd, subtypes(0xAF));
    primitive("textdegree", specchar_cmd, subtypes(0xB0));
    primitive("textpm", specchar_cmd, subtypes(0xB1));
    primitive("texttwosuperior", specchar_cmd, subtypes(0xB2));
    primitive("textthreesuperior", specchar_cmd, subtypes(0xB3));
    primitive("textasciiacute", char_given_cmd, subtypes(0xB4));
    primitive("textmu", specchar_cmd, subtypes(0xB5));
    primitive("P", char_given_cmd, subtypes(0xB6));
    primitive("textparagraph", specchar_cmd, subtypes(0xB6));
    primitive("textpilcrow", specchar_cmd, subtypes(0xB6));
    primitive("textperiodcentered", specchar_cmd, subtypes(0xB7));
    primitive("textasciicedilla", specchar_cmd, subtypes(0xB8));
    primitive("textonesuperior", specchar_cmd, subtypes(0xB9));
    primitive("textordmasculine", specchar_cmd, subtypes(0xBA));
    primitive("guillemotright", specchar_cmd, subtypes(0xBB));
    primitive("textonequarter", specchar_cmd, subtypes(0xBC));
    primitive("textonehalf", specchar_cmd, subtypes(0xBD));
    primitive("textthreequarters", specchar_cmd, subtypes(0xBE));
    primitive("textquestiondown", specchar_cmd, subtypes(0xBF));
    primitive("AA", specchar_cmd, subtypes(0xC5));
    primitive("AE", specchar_cmd, subtypes(0xC6));
    primitive("DH", specchar_cmd, subtypes(0xD0));
    primitive("texttimes", specchar_cmd, subtypes(0xD7));
    primitive("TH", specchar_cmd, subtypes(0xDE));
    primitive("aa", specchar_cmd, subtypes(0xE5));
    primitive("ae", specchar_cmd, subtypes(0xE6));
    primitive("dh", specchar_cmd, subtypes(0xF0));
    primitive("textdiv", specchar_cmd, subtypes(0xF7));
    primitive("th", specchar_cmd, subtypes(0xFE));
    primitive("o", specchar_cmd, subtypes(0xF8));
    primitive("O", specchar_cmd, subtypes(0xD8));
    primitive("DJ", specchar_cmd, subtypes(0x110));
    primitive("dj", specchar_cmd, subtypes(0x111));
    primitive("textflorin", specchar_cmd, subtypes(0x192));
    //  primitive("textasciibreve",specchar_cmd,subtypes(0x306));
    primitive("textasciibreve", specchar_cmd, subtypes(0x2D8));
    // primitive("textasciicaron",specchar_cmd,subtypes(0x30C));
    primitive("textasciicaron", specchar_cmd, subtypes(0x2C7));
    primitive("textbaht", specchar_cmd, subtypes(0xE3F));
    primitive("textendash", specchar_cmd, subtypes(0x2013));
    primitive("textemdash", specchar_cmd, subtypes(0x2014));
    primitive("textbardbl", specchar_cmd, subtypes(0x2016));
    primitive("textquoteleft", specchar_cmd, subtypes(0x2018));
    primitive("textquoteright", specchar_cmd, subtypes(0x2019));
    primitive("textquotedblleft", specchar_cmd, subtypes(0x201C));
    primitive("textquotedblright", specchar_cmd, subtypes(0x201D));
    primitive("textdagger", specchar_cmd, subtypes(0x2020));
    primitive("textdaggerdbl", specchar_cmd, subtypes(0x2021));
    primitive("textbullet", specchar_cmd, subtypes(0x2022));
    primitive("textellipsis", specchar_cmd, subtypes(0x2026));
    primitive("textperthousand", specchar_cmd, subtypes(0x2030));
    primitive("textpertenthousand", specchar_cmd, subtypes(0x2031));
    primitive("textacutedbl", specchar_cmd, subtypes(0x2033));
    primitive("textgravedbl", specchar_cmd, subtypes(0x2036));
    primitive("textreferencemark", specchar_cmd, subtypes(0x203B));
    primitive("textinterrobang", specchar_cmd, subtypes(0x203D));
    primitive("textlquill", specchar_cmd, subtypes(0x2045));
    primitive("textrquill", specchar_cmd, subtypes(0x2046));
    primitive("textfractionsolidus", specchar_cmd, subtypes(0x2044));
    primitive("textasteriskcentered", specchar_cmd, subtypes(0x204E));
    primitive("textcolonmonetary", specchar_cmd, subtypes(0x20A1));
    primitive("textfrenchfranc", specchar_cmd, subtypes(0x20A3));
    primitive("textlira", specchar_cmd, subtypes(0x20A4));
    primitive("textnaira", specchar_cmd, subtypes(0x20A6));
    primitive("textwon", specchar_cmd, subtypes(0x20A9));
    primitive("textdong", specchar_cmd, subtypes(0x20AB));
    primitive("texteuro", specchar_cmd, subtypes(0x20AC));
    primitive("textpeso", specchar_cmd, subtypes(0x20B1));
    primitive("textcelsius", specchar_cmd, subtypes(0x2103));
    primitive("textnumero", specchar_cmd, subtypes(0x2116));
    primitive("textcircledP", specchar_cmd, subtypes(0x2117));
    primitive("textrecipe", specchar_cmd, subtypes(0x211E));
    primitive("textservicemark", specchar_cmd, subtypes(0x2120));
    primitive("texttrademark", specchar_cmd, subtypes(0x2122));
    primitive("textohm", specchar_cmd, subtypes(0x2126));
    primitive("textmho", specchar_cmd, subtypes(0x2127));
    primitive("textestimated", specchar_cmd, subtypes(0x212E));
    primitive("textleftarrow", specchar_cmd, subtypes(0x2190));
    primitive("textuparrow", specchar_cmd, subtypes(0x2191));
    primitive("textrightarrow", specchar_cmd, subtypes(0x2192));
    primitive("textdownarrow", specchar_cmd, subtypes(0x2193));
    primitive("textsurd", specchar_cmd, subtypes(0x221A));
    primitive("textopenbullet", specchar_cmd, subtypes(0x25E6));
    primitive("textmusicalnote", specchar_cmd, subtypes(0x266A));
    primitive("textbigcircle", specchar_cmd, subtypes(0x25EF));
    primitive("textrangle", specchar_cmd, subtypes(0x3009));
    primitive("textlangle", specchar_cmd, subtypes(0x3008));

    // constants math and non math
    primitive("i", cst1_cmd, i_code);
    primitive("j", cst1_cmd, j_code);
    primitive("$", cst1_cmd, dollar_code);
    primitive("textdollar", cst_cmd, dollar_code);
    primitive(",", cst1_cmd, comma_code);
    primitive("thinspace", cst1_cmd, comma_code);
    primitive("_", cst1_cmd, underscore_code);
    primitive("&", cst1_cmd, amp_code);
    primitive("{", cst1_cmd, lbrace_chr);
    primitive("}", cst1_cmd, rbrace_chr);
    primitive("%", cst1_cmd, percent_code);
    primitive(" ", cst1_cmd, space_code);
    primitive("\n", cst1_cmd, space_code);
    primitive("\r", cst1_cmd, space_code);
    primitive("\t", cst1_cmd, space_code);
    primitive("!", cst1_cmd, exclam_code);
    primitive("quad", cst1_cmd, quad_code);
    primitive("qquad", cst1_cmd, qquad_code);
    primitive("dots", cst1_cmd, dots_code);
    primitive("ldots", cst1_cmd, ldots_code);
    primitive("#", cst1_cmd, sharp_code);
    primitive("sharp", cst1_cmd, msharp_code);
    primitive("natural", cst1_cmd, natural_code);
    primitive("flat", cst1_cmd, flat_code);
    primitive("textasciigrave", specchar_cmd, subtypes(0x2035));
    primitive("textasciiacutex", cst_cmd, textasciiacutex_code);
    primitive("dag", cst1_cmd, tdagger_code);
    primitive("ddag", cst1_cmd, tddagger_code);
    primitive("-", cst_cmd, dash_code);
    primitive("SS", cst_cmd, SS_code);
    primitive("numero", cst2_cmd, numero_code);
    primitive("Numero", cst2_cmd, Numero_code);
    primitive("No", cst2_cmd, Numero_code);
    primitive("no", cst2_cmd, numero_code);
    primitive("ier", cst2_cmd, ier_code);
    primitive("iere", cst2_cmd, iere_code);
    primitive("iers", cst2_cmd, iers_code);
    primitive("ieres", cst2_cmd, ieres_code);
    primitive("ieme", cst2_cmd, ieme_code);
    primitive("iemes", cst2_cmd, iemes_code);
    primitive("textnospace", specchar_cmd, subtypes(0x200B));
    primitive("LaTeX", cst_cmd, LaTeX_code);
    primitive("TeX", cst_cmd, TeX_code);
    primitive("ss", cst_cmd, ss_code);
    primitive("slash", cst_cmd, slash_code);
    primitive("textbackslash", cst_cmd, textbackslash_code);
    //  primitive("null",cst_cmd,null_code);
    primitive("IfFileExists", file_cmd, ifexists_code);
    primitive("InputIfFileExists", file_cmd, inputifexists_code);
    primitive("input", input_cmd, input_code);
    primitive("Input", input_cmd, Input_code);
    primitive("include", input_cmd, include_code);
    primitive("readxml", input_cmd, readxml_code);
    primitive("endinput", input_cmd, endinput_code);
    primitive("openin", file_cmd, openin_code);
    primitive("closein", file_cmd, closein_code);
    primitive("xmlelt", xmlelt_cmd, zero_code);
    primitive("xmlemptyelt", xmlelt_cmd, one_code);
    primitive("xmlcomment", xmlelt_cmd, two_code);
    primitive("newcolumntype", newcolumntype_cmd);
    primitive("lsc", arg_font_cmd, lsc_code);
    primitive("fsc", arg_font_cmd, fsc_code);
    primitive("hrule", rule_cmd, hrule_code);
    primitive("vrule", rule_cmd, vrule_code);
    primitive("rule", rule_cmd, rule_code);
    primitive("ding", ding_cmd);
    primitive("grabenv", grabenv_cmd);
    primitive("dates@checkdate", check_date_cmd);
    primitive("dates@countdays", check_date_cmd, one_code);
    primitive("dates@nextdate", check_date_cmd, two_code);
    primitive("dates@prevdate", check_date_cmd, three_code);
    primitive("dates@datebynumber", check_date_cmd, subtypes(4));
    primitive("@monthnamefrench", month_day_cmd, md_frenchm_code);
    primitive("@daynamefrench", month_day_cmd, md_frenchd_code);
    primitive("@monthnamegerman", month_day_cmd, md_germanm_code);
    primitive("@daynamegerman", month_day_cmd, md_germand_code);
    primitive("@monthnameenglish", month_day_cmd, md_englishm_code);
    primitive("@daynameenglish", month_day_cmd, md_englishd_code);
    primitive("@monthnamespanish", month_day_cmd, md_spanishm_code);
    primitive("@daynamespanish", month_day_cmd, md_spanishd_code);
    // environments
    primitive("document", document_cmd);
    primitive("motscle", keywords_cmd);
    //  primitive("keywords",keywords_cmd);
    primitive("center", center_cmd, center_code);
    primitive("verse", center_cmd, verse_code);
    primitive("quote", center_cmd, quote_code);
    primitive("quotation", center_cmd, quotation_code);
    primitive("flushleft", center_cmd, flushleft_code);
    primitive("flushright", center_cmd, flushright_code);
    primitive("@float", float_cmd, subtypes(0));
    primitive("@dblfloat", float_cmd, subtypes(1));
    primitive("float@end", float_cmd, subtypes(2));
    primitive("float@dblend", float_cmd, subtypes(3));
    primitive("figure", figure_cmd, zero_code);
    primitive("wrapfigure", figure_cmd, two_code);
    primitive("figure*", figure_cmd, one_code);
    primitive("table", table_cmd, zero_code);
    primitive("table*", table_cmd, one_code);
    primitive("wraptable", table_cmd, two_code);
    primitive("@glossaire", glossaire_cmd);
    primitive("usecounter", usecounter_cmd);
    primitive("itemize", itemize_cmd);
    primitive("list", list_cmd);
    primitive("enumerate", enumerate_cmd);
    primitive("description", description_cmd);
    primitive("latexonly", ignore_env_cmd, latexonly_code);
    primitive("xmlonly", ignore_env_cmd, xmlonly_code);
    primitive("comment", ignore_content_cmd, comment_code);
    primitive("LaTeXonly", ignore_content_cmd, LaTeXonly_code);
    primitive("rawxml", raw_env_cmd);
    primitive("eqnarray", math_env_cmd, eqnarray_code);
    primitive("eqnarray*", math_env_cmd, eqnarray_star_code);
    primitive("Beqnarray", math_env_cmd, Beqnarray_code);
    primitive("Beqnarray*", math_env_cmd, Beqnarray_star_code);
    primitive("multline", math_env_cmd, multline_code);
    primitive("multline*", math_env_cmd, multline_star_code);
    primitive("gather", math_env_cmd, gather_code);
    primitive("gather*", math_env_cmd, gather_star_code);
    primitive("aligned", math_env_cmd, aligned_code);
    primitive("gathered", math_env_cmd, gathered_code);
    primitive("split", math_env_cmd, split_code);
    primitive("equation", math_env_cmd, equation_code);
    primitive("equation*", math_env_cmd, equation_star_code);
    primitive("math", math_env_cmd, math_code);
    primitive("displaymath", math_env_cmd, displaymath_code);
    primitive("align", math_env_cmd, align_code);
    primitive("align*", math_env_cmd, align_star_code);
    primitive("flalign", math_env_cmd, flalign_code);
    primitive("flalign*", math_env_cmd, flalign_star_code);
    primitive("alignat", math_env_cmd, alignat_code);
    primitive("alignat*", math_env_cmd, alignat_star_code);
    primitive("xalignat", math_env_cmd, xalignat_code);
    primitive("xalignat*", math_env_cmd, xalignat_star_code);
    primitive("xxalignat", math_env_cmd, xxalignat_code);
    primitive("xxalignat*", math_env_cmd, xxalignat_star_code);
    primitive("array", math_env_cmd, array_code);
    primitive("matrix", math_env_cmd, matrix_code);
    primitive("bordermatrix ", math_env_cmd, bordermatrix_code); // space!
    primitive("bmatrix", math_env_cmd, matrixb_code);
    primitive("Bmatrix", math_env_cmd, matrixB_code);
    primitive("pmatrix", math_env_cmd, matrixp_code);
    primitive("vmatrix", math_env_cmd, matrixv_code);
    primitive("Vmatrix", math_env_cmd, matrixV_code);

    primitive("tabular", tabular_env_cmd, zero_code);
    primitive("tabular*", tabular_env_cmd, one_code);
    primitive("verbatim", verbatim_env_cmd, zero_code);
    primitive("Verbatim", verbatim_env_cmd, one_code);
    primitive("lst@verbatim", verbatim_env_cmd, two_code);
    primitive("minipage", minipage_cmd);
    primitive("subequations", subequations_cmd);
    primitive("picture", picture_env_cmd);
    primitive("xmlelement", xmlelement_env_cmd);
    primitive("xmlelement*", xmlelement_env_cmd, one_code);
    primitive("xmlelement+", xmlelement_env_cmd, two_code);
    primitive("filecontents", filecontents_env_cmd);
    primitive("filecontents*", filecontents_env_cmd, one_code);
    primitive("filecontents+", filecontents_env_cmd, two_code);
    primitive("filecontents-", filecontents_env_cmd, three_code);
    primitive("enddocument", end_document_cmd);
    real_end_token = nohash_primitive("real-enddocument", CmdChr(end_document_cmd, one_code));
    primitive("endmotscle", end_keywords_cmd);
    primitive("endcenter", end_center_cmd, center_code);
    primitive("endverse", end_center_cmd, verse_code);
    primitive("endquote", end_center_cmd, quote_code);
    primitive("endquotation", end_center_cmd, quotation_code);
    primitive("endflushleft", end_center_cmd, flushleft_code);
    primitive("endflushright", end_center_cmd, flushright_code);
    primitive("endfigure", end_figure_cmd, zero_code);
    primitive("endwrapfigure", end_figure_cmd, two_code);
    primitive("endfigure*", end_figure_cmd, one_code);
    primitive("endtable", end_table_cmd, zero_code);
    primitive("endwraptable", end_table_cmd, two_code);
    primitive("endtable*", end_table_cmd, one_code);
    primitive("end@glossaire", end_glossaire_cmd);
    primitive("enditemize", end_itemize_cmd);
    primitive("endlist", end_list_cmd);
    primitive("endenumerate", end_enumerate_cmd);
    primitive("enddescription", end_description_cmd);
    primitive("endlatexonly", end_ignore_env_cmd, latexonly_code);
    primitive("endxmlonly", end_ignore_env_cmd, xmlonly_code);
    //  primitive("endcomment",end_ignore_content_cmd,comment_code);
    primitive("endLaTeXonly", end_ignore_content_cmd, LaTeXonly_code);
    primitive("endrawxml", end_raw_env_cmd);
    // primitive("endeqnarray",end_math_env_cmd,eqnarray_code);
    // primitive("endeqnarray*",end_math_env_cmd,eqnarray_star_code);
    // primitive("endBeqnarray",end_math_env_cmd,Beqnarray_code);
    // primitive("endBeqnarray*",end_math_env_cmd,Beqnarray_star_code);
    // primitive("endmultline",end_math_env_cmd,multline_code);
    // primitive("endmultline*",end_math_env_cmd,multline_star_code);
    // primitive("endgather",end_math_env_cmd,gather_code);
    // primitive("endgather*",end_math_env_cmd, gather_star_code);
    // primitive("endalign",end_math_env_cmd,align_code);
    // primitive("endsplit",end_math_env_cmd,split_code);
    // primitive("endaligned",end_math_env_cmd,aligned_code);
    // primitive("endgathered",end_math_env_cmd,gathered_code);
    // primitive("endequation",end_math_env_cmd,equation_code);
    // primitive("endequation*",end_math_env_cmd,equation_star_code);
    // primitive("endmath",end_math_env_cmd,math_code);
    // primitive("enddisplaymath",end_math_env_cmd,displaymath_code);
    primitive("endtabular", end_tabular_env_cmd, zero_code);
    primitive("endtabular*", end_tabular_env_cmd, one_code);
    primitive("endverbatim", end_verbatim_env_cmd, zero_code);
    primitive("endVerbatim", end_verbatim_env_cmd, one_code);
    primitive("endlst@verbatim", end_verbatim_env_cmd, two_code);
    primitive("endminipage", end_minipage_cmd);
    primitive("endsubequations", end_subequations_cmd);
    primitive("endpicture", end_picture_env_cmd);
    primitive("endfilecontents", end_filecontents_env_cmd);
    primitive("endfilecontents*", end_filecontents_env_cmd, one_code);
    primitive("endxmlelement", end_xmlelement_env_cmd);
    primitive("endxmlelement*", end_xmlelement_env_cmd, one_code);
    primitive("endxmlelement+", end_xmlelement_env_cmd, two_code);
    primitive("begin", begin_cmd);
    primitive("end", end_cmd);

    primitive("leavevmode", leave_v_mode_cmd);
    primitive("epsfbox", epsfbox_cmd, zero_code);
    primitive("put", put_cmd, put_code);
    primitive("line", put_cmd, line_code);
    primitive("vector", put_cmd, vector_code);
    primitive("oval", put_cmd, oval_code);
    primitive("multiput", put_cmd, multiput_code);
    primitive("frame", put_cmd, frame_code);
    primitive("dashbox", fbox_cmd, dashbox_code);
    // From curves.plt
    primitive("curves@arc", curves_cmd, arc_code);
    primitive("curves@bezier", bezier_cmd, zero_code);
    primitive("curves@bigcircle", curves_cmd, bigcircle_code);
    primitive("curves@closecurve", curves_cmd, closecurve_code);
    primitive("curves@curve", curves_cmd, curve_code);
    primitive("curves@tagcurve", curves_cmd, tagcurve_code);
    primitive("curves@scaleput", put_cmd, scaleput_code);
    // other commands
    primitive("qbezier", bezier_cmd, one_code);
    primitive("dashline", dashline_cmd, dashline_code);
    primitive("drawline", dashline_cmd, drawline_code);
    primitive("dottedline", dashline_cmd, dottedline_code);
    primitive("circle", dashline_cmd, circle_code);
    primitive("thicklines", thickness_cmd, thicklines_code);
    primitive("thinlines", thickness_cmd, thinlines_code);
    primitive("linethickness", thickness_cmd, linethickness_code);
    primitive("sloppy", ignore_cmd, sloppy_code);
    primitive("fussy", ignore_cmd, fussy_code);
    primitive("subitem", ignore_cmd, subitem_code);
    //  primitive("htmlimage",ignore_cmd,htmlimage_code);
    primitive("immediate", ignore_cmd, immediate_code);
    primitive("unpenalty", ignore_cmd, unpenalty_code);
    primitive("unkern", ignore_cmd, unkern_code);
    primitive("unskip", ignore_cmd, unskip_code);
    primitive("@addnl", ignore_cmd, addnl_code);
    primitive("@", ignore_cmd, atsign_code);
    primitive("/", ignore_cmd, italiccorr_code);
    primitive("newpage", ignoreA_cmd, newpage_code);
    primitive("hrulefill", ignoreA_cmd, hrulefill_code);
    primitive("dotfill", ignoreA_cmd, dotfill_code);
    primitive("samepage", ignoreA_cmd, samepage_code);
    primitive("clearpage", ignoreA_cmd, clearpage_code);
    primitive("cleardoublepage", ignoreA_cmd, cleardoublepage_code);
    primitive("break", ignore_cmd, break_code);
    primitive("nobreak", ignore_cmd, nobreak_code);
    allowbreak_token = primitive("allowbreak", specimp_cmd, allowbreak_code);
    primitive("filbreak", ignorep_cmd, fillbreak_code);
    primitive("goodbreak", ignorep_cmd, goodbreak_code);
    primitive("eject", ignorep_cmd, eject_code);
    primitive("smallbreak", ignorep_cmd, smallbreak_code);
    primitive("medbreak", ignorep_cmd, medbreak_code);
    primitive("bigbreak", ignorep_cmd, bigbreak_code);
    primitive("nointerlineskip", ignore_cmd, nointerlineskip_code);
    primitive("offinterlineskip", ignore_cmd, offinterlineskip_code);
    primitive("frenchspacing", ignore_cmd, frenchspacing_code);
    primitive("nonfrenchspacing", ignore_cmd, nonfrenchspacing_code);
    primitive("showoverfull", ignore_cmd, showoverfull_code);
    primitive("loggingoutput", ignore_cmd, loggingoutput_code);
    primitive("showoutput", ignore_cmd, showoutput_code);
    primitive("nofiles", ignore_cmd, nofiles_code);
    primitive("raggedbottom", ignore_cmd, raggedbottom_code);
    primitive("flushbottom", ignore_cmd, flushbottom_code);
    primitive("onecolumn", ignore_cmd, onecolumn_code);
    primitive("twocolumn", ignore_cmd, twocolumn_code);
    primitive("normalmarginpar", ignore_cmd, normalmarginpar_code);
    primitive("reversemarginpar", ignore_cmd, reversemarginpar_code);
    primitive("normalbaselines", ignore_cmd, normalbaselines_code);
    primitive("removelastskip", ignore_cmd, removelastskip_code);
    primitive("vglue", vglue_cmd);
    primitive("hglue", vglue_cmd, one_code);
    primitive("zap@space", zapspace_cmd);
    primitive("zap@fl@space", zapspace_cmd, one_code);
    primitive("strip@prefix", stripprefix_cmd);
    primitive("hexnumber@", hexnumber_cmd);
    primitive("selectfont", selectfont_cmd);
    primitive("usefont", usefont_cmd);
    primitive("in@", isin_cmd);
    primitive("multispan", multispan_cmd);
    primitive("listfiles", listfiles_cmd);
    primitive("leftline", line_cmd, leftline_code);
    primitive("rightline", line_cmd, rightline_code);
    primitive("centerline", line_cmd, centerline_code);
    primitive("llap", line_cmd, llap_code);
    primitive("rlap", line_cmd, rlap_code);
    relax_token     = primitive("relax", relax_cmd, relax_code);
    genfrac_mode[4] = relax_token;
    primitive("bibliographystyle", bibliographystyle_cmd);
    primitive("insertbibliohere", insertbibliohere_cmd);
    primitive("syntaxonly", inhibit_xml_cmd);
    primitive("footcitepre", footcitepre_cmd);
    primitive("RAlabel", ignore_one_argument_cmd, RAlabel_code);
    primitive("hyphenation", ignore_one_argument_cmd, hyphenation_code);
    primitive("patterns", ignore_one_argument_cmd, patterns_code);
    primitive("special", ignore_one_argument_cmd, special_code);
    primitive("includeonly", ignore_one_argument_cmd, includeonly_code);
    primitive("showhyphens", ignore_one_argument_cmd, showhyphens_code);
    primitive("fontsize", ignore_two_argument_cmd, fontsize_code);
    primitive("fontencoding", ltfont_cmd, fontencoding_code);
    primitive("fontfamily", ltfont_cmd, fontfamily_code);
    primitive("fontseries", ltfont_cmd, fontseries_code);
    primitive("fontshape", ltfont_cmd, fontshape_code);
    primitive("discretionary", specimp_cmd, discretionary_code);
    primitive("DefineVerbatimEnvironment", defineverbatimenv_cmd);
    primitive("SaveVerb", saveverb_cmd);
    primitive("KVO@family@set", kvo_family_cmd, kvo_fam_set_code);
    primitive("KVO@family", kvo_family_cmd, kvo_fam_get_code);
    primitive("KVO@prefix@set", kvo_family_cmd, kvo_pre_set_code);
    primitive("KVO@prefix", kvo_family_cmd, kvo_pre_get_code);
    primitive("KVO@boolkey", kvo_family_cmd, kvo_boolkey_code);
    primitive("KVO@voidkey", kvo_family_cmd, kvo_voidkey_code);
    primitive("DeclareDefaultOption", kvo_family_cmd, kvo_decdef_code);
    primitive("ProcessKeyvalOptions", kvo_family_cmd, kvo_process_code);
    primitive("DeclareBoolOption", kvo_family_cmd, kvo_bool_opt_code);
    primitive("DeclareStringOption", kvo_family_cmd, kvo_string_opt_code);
    primitive("DeclareVoidOption", kvo_family_cmd, kvo_void_opt_code);
    primitive("DeclareComplementaryOption", kvo_family_cmd, kvo_comp_opt_code);
    primitive("makeatletter", makeatletter_cmd);
    primitive("makeatother", makeatother_cmd);
    primitive("numberedverbatim", numberedverbatim_cmd);
    primitive("unnumberedverbatim", unnumberedverbatim_cmd);
    primitive("afterassignment", after_assignment_cmd);
    primitive("unhbox", un_box_cmd, unhbox_code);
    primitive("unhcopy", un_box_cmd, unhcopy_code);
    primitive("unvbox", un_box_cmd, unvbox_code);
    primitive("unvcopy", un_box_cmd, unvcopy_code);
    primitive("typeout", extension_cmd, typeout_code);
    primitive("wlog", extension_cmd, wlog_code);
    primitive("openout", extension_cmd, openout_code);
    primitive("write", extension_cmd, write_code);
    primitive("closeout", extension_cmd, closeout_code);
    primitive("setlanguage", setlanguage_cmd);
    primitive("show", xray_cmd, show_code);
    primitive("showbox", xray_cmd, showbox_code);
    primitive("show@xmlA", xray_cmd, show_xmlA_code);
    primitive("show@xmlB", xray_cmd, show_xmlB_code);
    primitive("showthe", xray_cmd, showthe_code);
    primitive("showlists", xray_cmd, showlists_code);
    primitive("moveleft", move_cmd, moveleft_code);
    primitive("moveright", move_cmd, moveright_code);
    primitive("raise", move_cmd, raise_code);
    primitive("lower", move_cmd, lower_code);
    primitive("shipout", leader_ship_cmd, shipout_code);
    primitive("leaders", leader_ship_cmd, leaders_code);
    primitive("cleaders", leader_ship_cmd, cleaders_code);
    primitive("xleaders", leader_ship_cmd, xleaders_code);
    primitive("tracingall", tracingall_cmd);
    primitive("loggingall", tracingall_cmd);
    primitive("newif", newif_cmd);
    primitive("newcount", newcount_cmd, newcount_code);
    primitive("newtoks", newcount_cmd, newtoks_code);
    primitive("newbox", newcount_cmd, newbox_code);
    primitive("newdimen", newcount_cmd, newdimen_code);
    primitive("newlength", newcount_cmd, newlength_code);
    primitive("newskip", newcount_cmd, newlength_code);
    primitive("newmuskip", newcount_cmd, newmuskip_code);
    primitive("newread", newcount_cmd, newread_code);
    primitive("newwrite", newcount_cmd, newwrite_code);
    primitive("newlanguage", newcount_cmd, newlanguage_code);

    primitive("newcounter", newcounter_cmd);
    primitive("newboolean", newboolean_cmd, zero_code);
    primitive("provideboolean", newboolean_cmd, one_code);
    primitive("setboolean", setboolean_cmd);
    primitive("ifthenelse", ifthenelse_cmd);
    primitive("whiledo", whiledo_cmd);
    primitive("DefineShortVerb", shortverb_cmd, zero_code);
    primitive("UndefineShortVerb", shortverb_cmd, one_code);
    primitive("aftergroup", aftergroup_cmd);
    arabic_token = primitive("arabic", latex_ctr_cmd, arabic_code);
    roman_token  = primitive("roman", latex_ctr_cmd, roman_code);
    Roman_token  = primitive("Roman", latex_ctr_cmd, Roman_code);
    alph_token   = primitive("alph", latex_ctr_cmd, alph_code);
    Alph_token   = primitive("Alph", latex_ctr_cmd, Alph_code);
    primitive("fnsymbol", latex_ctr_cmd, fnsymbol_code);
    atalph_token   = primitive("@alph", latex_ctr_cmd, at_alph_code);
    atAlph_token   = primitive("@Alph", latex_ctr_cmd, at_Alph_code);
    fnsymbol_token = primitive("@fnsymbol", latex_ctr_cmd, at_fnsymbol_code);
    primitive("@ifundefined", ifundefined_cmd);
    primitive("tralics@ifundefined", ifundefined_cmd, one_code);
    primitive("@ifstar", ifstar_cmd);
    primitive("@ifnextchar", ifnextchar_cmd);
    primitive("@ifnextcharacter", ifnextchar_cmd, one_code);
    primitive("@iftempty", ifempty_cmd, zero_code);
    primitive("@ifbempty", ifempty_cmd, one_code);
    // min_internal here...
    primitive("lastpenalty", last_item_cmd, lastpenalty_code);
    primitive("lastkern", last_item_cmd, lastkern_code);
    primitive("lastskip", last_item_cmd, lastskip_code);
    primitive("inputlineno", last_item_cmd, inputlineno_code);
    primitive("badness", last_item_cmd, badness_code);
    // max_non_prefixed here
    primitive("toks", toks_register_cmd);
    primitive("output", assign_toks_cmd, output_code);
    primitive("everybibitem", assign_toks_cmd, everybibitem_code);
    primitive("everypar", assign_toks_cmd, everypar_code);
    primitive("everymath", assign_toks_cmd, everymath_code);
    primitive("everydisplay", assign_toks_cmd, everydisplay_code);
    primitive("everyhbox", assign_toks_cmd, everyhbox_code);
    primitive("everyvbox", assign_toks_cmd, everyvbox_code);
    primitive("everyjob", assign_toks_cmd, everyjob_code);
    primitive("everycr", assign_toks_cmd, everycr_code);
    primitive("everyxbox", assign_toks_cmd, everyxbox_code);
    primitive("errhelp", assign_toks_cmd, errhelp_code);
    primitive("pretolerance", assign_int_cmd, pretolerance_code);
    primitive("tolerance", assign_int_cmd, tolerance_code);
    primitive("hbadness", assign_int_cmd, hbadness_code);
    primitive("vbadness", assign_int_cmd, vbadness_code);
    primitive("linepenalty", assign_int_cmd, linepenalty_code);
    primitive("hyphenpenalty", assign_int_cmd, hyphenpenalty_code);
    primitive("exhyphenpenalty", assign_int_cmd, exhyphenpenalty_code);
    primitive("binoppenalty", assign_int_cmd, binoppenalty_code);
    primitive("relpenalty", assign_int_cmd, relpenalty_code);
    primitive("clubpenalty", assign_int_cmd, clubpenalty_code);
    primitive("widowpenalty", assign_int_cmd, widowpenalty_code);
    primitive("displaywidowpenalty", assign_int_cmd, displaywidowpenalty_code);
    primitive("brokenpenalty", assign_int_cmd, brokenpenalty_code);
    primitive("predisplaypenalty", assign_int_cmd, predisplaypenalty_code);
    primitive("postdisplaypenalty", assign_int_cmd, postdisplaypenalty_code);
    primitive("interlinepenalty", assign_int_cmd, interlinepenalty_code);
    primitive("floatingpenalty", assign_int_cmd, floatingpenalty_code);
    primitive("outputpenalty", assign_int_cmd, outputpenalty_code);
    primitive("doublehyphendemerits", assign_int_cmd, doublehyphendemerits_code);
    primitive("finalhyphendemerits", assign_int_cmd, finalhyphendemerits_code);
    primitive("adjdemerits", assign_int_cmd, adjdemerits_code);
    primitive("looseness", assign_int_cmd, looseness_code);
    primitive("pausing", assign_int_cmd, pausing_code);
    primitive("holdinginserts", assign_int_cmd, holdinginserts_code);
    primitive("tracingonline", assign_int_cmd, tracingonline_code);
    primitive("tracingmacros", assign_int_cmd, tracingmacros_code);
    primitive("tracingstats", assign_int_cmd, tracingstats_code);
    primitive("tracingparagraphs", assign_int_cmd, tracingparagraphs_code);
    primitive("tracingpages", assign_int_cmd, tracingpages_code);
    primitive("tracingoutput", assign_int_cmd, tracingoutput_code);
    primitive("tracinglostchars", assign_int_cmd, tracinglostchars_code);
    primitive("tracingcommands", assign_int_cmd, tracingcommands_code);
    primitive("tracingrestores", assign_int_cmd, tracingrestores_code);
    primitive("tracingmath", assign_int_cmd, tracingmath_code);
    primitive("language", assign_int_cmd, language_code);
    primitive("uchyph", assign_int_cmd, uchyph_code);
    primitive("lefthyphenmin", assign_int_cmd, lefthyphenmin_code);
    primitive("righthyphenmin", assign_int_cmd, righthyphenmin_code);
    primitive("globaldefs", assign_int_cmd, globaldefs_code);
    primitive("defaulthyphenchar", assign_int_cmd, defaulthyphenchar_code);
    primitive("defaultskewchar", assign_int_cmd, defaultskewchar_code);
    primitive("escapechar", assign_int_cmd, escapechar_code);
    primitive("endlinechar", assign_int_cmd, endlinechar_code);
    primitive("newlinechar", assign_int_cmd, newlinechar_code);
    primitive("maxdeadcycles", assign_int_cmd, maxdeadcycles_code);
    primitive("hangafter", assign_int_cmd, hangafter_code);
    primitive("fam", assign_int_cmd, fam_code);
    primitive("mag", assign_int_cmd, mag_code);
    primitive("delimiterfactor", assign_int_cmd, delimiterfactor_code);
    primitive("time", assign_int_cmd, time_code);
    primitive("day", assign_int_cmd, day_code);
    primitive("month", assign_int_cmd, month_code);
    primitive("year", assign_int_cmd, year_code);
    primitive("@nomathml", assign_int_cmd, nomath_code);
    primitive("multi@math@label", assign_int_cmd, multimlabel_code);
    primitive("@curmathfont", assign_int_cmd, math_font_pos);
    primitive("notrivialmath", assign_int_cmd, notrivialmath_code);
    primitive("showboxbreadth", assign_int_cmd, showboxbreadth_code);
    primitive("showboxdepth", assign_int_cmd, showboxdepth_code);
    mathversion_token = primitive("@mathversion", assign_int_cmd, atmathversion_code);
    primitive("tralics@use@subfigure", assign_int_cmd, use_subfigure_code);
    primitive("XMLlastid", last_item_cmd, xmllastid_code);
    primitive("XML@A@id", last_item_cmd, xmlAid_code);
    primitive("XML@B@id", last_item_cmd, xmlBid_code);
    primitive("XML@A@size", last_item_cmd, xmlAsize_code);
    primitive("XMLbox@name", last_item_cmd, XMLboxname_code);
    primitive("XML@A@name", last_item_cmd, xmlAname_code);
    primitive("XML@B@name", last_item_cmd, xmlBname_code);
    primitive("XMLbox@id", last_item_cmd, XMLboxid_code);
    primitive("XMLcurrentarrayid", last_item_cmd, xmlcurarray_code);
    primitive("XMLcurrentrowid", last_item_cmd, xmlcurrow_code);
    primitive("XMLcurrentcellid", last_item_cmd, xmlcurcell_code);
    primitive("XMLcurrentid", last_item_cmd, xmlcurrentid_code);
    primitive("XML@get", XML_modify_cmd, xml_get_code);
    primitive("XML@insert", XML_modify_cmd, xml_ins_code);
    primitive("XML@delete", XML_modify_cmd, xml_del_code);
    primitive("XML@set", XML_modify_cmd, xml_set_code);
    primitive("XML@parent", XML_modify_cmd, xml_parent_code);
    primitive("XML@setA", XML_modify_cmd, xml_setA_code);
    primitive("XML@setB", XML_modify_cmd, xml_setB_code);
    primitive("errorcontextlines", assign_int_cmd, errorcontextlines_code);
    primitive("hfuzz", assign_dimen_cmd, hfuzz_code);
    primitive("vfuzz", assign_dimen_cmd, vfuzz_code);
    primitive("overfullrule", assign_dimen_cmd, overfullrule_code);
    primitive("emergencystretch", assign_dimen_cmd, emergencystretch_code);
    primitive("hsize", assign_dimen_cmd, hsize_code);
    primitive("vsize", assign_dimen_cmd, vsize_code);
    primitive("maxdepth", assign_dimen_cmd, maxdepth_code);
    primitive("splitmaxdepth", assign_dimen_cmd, splitmaxdepth_code);
    primitive("boxmaxdepth", assign_dimen_cmd, boxmaxdepth_code);
    primitive("lineskiplimit", assign_dimen_cmd, lineskiplimit_code);
    primitive("delimitershortfall", assign_dimen_cmd, delimitershortfall_code);
    primitive("nulldelimiterspace", assign_dimen_cmd, nulldelimiterspace_code);
    primitive("scriptspace", assign_dimen_cmd, scriptspace_code);
    primitive("mathsurround", assign_dimen_cmd, mathsurround_code);
    primitive("predisplaysize", assign_dimen_cmd, predisplaysize_code);
    primitive("displaywidth", assign_dimen_cmd, displaywidth_code);
    primitive("displayindent", assign_dimen_cmd, displayindent_code);
    primitive("parindent", assign_dimen_cmd, parindent_code);
    primitive("hangindent", assign_dimen_cmd, hangindent_code);
    primitive("hoffset", assign_dimen_cmd, hoffset_code);
    primitive("voffset", assign_dimen_cmd, voffset_code);
    unitlength_token = primitive("unitlength", assign_dimen_cmd, unitlength_code);
    primitive("textheight", assign_dimen_cmd, textheight_code);
    primitive("textwidth", assign_dimen_cmd, textwidth_code);
    primitive("linewidth", assign_dimen_cmd, linewidth_code);
    primitive("columnwidth", assign_dimen_cmd, columnwidth_code);

    primitive("lineskip", assign_glue_cmd, lineskip_code);
    primitive("baselineskip", assign_glue_cmd, baselineskip_code);
    primitive("parskip", assign_glue_cmd, parskip_code);
    primitive("abovedisplayskip", assign_glue_cmd, abovedisplayskip_code);
    primitive("belowdisplayskip", assign_glue_cmd, belowdisplayskip_code);
    primitive("abovedisplayshortskip", assign_glue_cmd, abovedisplayshortskip_code);
    primitive("belowdisplayshortskip", assign_glue_cmd, belowdisplayshortskip_code);
    primitive("leftskip", assign_glue_cmd, leftskip_code);
    primitive("rightskip", assign_glue_cmd, rightskip_code);
    primitive("topskip", assign_glue_cmd, topskip_code);
    primitive("splittopskip", assign_glue_cmd, splittopskip_code);
    primitive("tabskip", assign_glue_cmd, tabskip_code);
    primitive("spaceskip", assign_glue_cmd, spaceskip_code);
    primitive("xspaceskip", assign_glue_cmd, xspaceskip_code);
    primitive("parfillskip", assign_glue_cmd, parfillskip_code);
    primitive("thinmuskip", assign_mu_glue_cmd, thinmuskip_code);
    primitive("medmuskip", assign_mu_glue_cmd, medmuskip_code);
    primitive("thickmuskip", assign_mu_glue_cmd, thickmuskip_code);
    primitive("fontdimen", assign_font_dimen_cmd, subtypes(0));
    primitive("hyphenchar", assign_font_int_cmd, subtypes(0));
    primitive("input@encoding@val", assign_enc_char_cmd);
    primitive("skewchar", assign_font_int_cmd, subtypes(1));
    primitive("spacefactor", set_aux_cmd, subtypes(0));
    primitive("prevdepth", set_aux_cmd, subtypes(1));
    primitive("input@encoding", set_aux_cmd, subtypes(2));
    primitive("input@encoding@default", set_aux_cmd, subtypes(3));
    primitive("@xfontsize", set_aux_cmd, subtypes(4));
    primitive("prevgraf", set_prev_graf_cmd);
    primitive("pagegoal", set_page_dimen_cmd, pagegoal_code);
    primitive("pagetotal", set_page_dimen_cmd, pagetotal_code);
    primitive("pagestretch", set_page_dimen_cmd, pagestretch_code);
    primitive("pagefilstretch", set_page_dimen_cmd, pagefilstretch_code);
    primitive("pagefillstretch", set_page_dimen_cmd, pagefillstretch_code);
    primitive("pagefilllstretch", set_page_dimen_cmd, pagefilllstretch_code);
    primitive("pageshrink", set_page_dimen_cmd, pageshrink_code);
    primitive("pagedepth", set_page_dimen_cmd, pagedepth_code);
    primitive("deadcycles", set_page_int_cmd, deadcycles_code);
    primitive("insertpenalties", set_page_int_cmd, insertpenalties_code);
    primitive("wd", set_box_dimen_cmd, wd_code);
    primitive("ht", set_box_dimen_cmd, ht_code);
    primitive("dp", set_box_dimen_cmd, dp_code);
    primitive("parshape", set_shape_cmd, parshape_code);
    primitive("catcode", def_code_cmd, subtypes(0));
    primitive("mathcode", def_code_cmd, math_code_offset);
    primitive("lccode", def_code_cmd, lc_code_offset);
    primitive("uccode", def_code_cmd, uc_code_offset);
    primitive("sfcode", def_code_cmd, sf_code_offset);
    primitive("delcode", def_code_cmd, del_code_offset);
    primitive("textfont", def_family_cmd, textfont_code);
    primitive("scriptfont", def_family_cmd, scriptfont_code);
    primitive("scriptscriptfont", def_family_cmd, scriptscriptfont_code);
    primitive("nullfont", set_font_cmd);
    primitive("font", def_font_cmd);
    primitive("mathfontproperty", set_mathprop_cmd);
    primitive("setmathchar", set_mathchar_cmd);
    primitive("count", register_cmd, subtypes(it_int));
    primitive("dimen", register_cmd, subtypes(it_dimen));
    primitive("skip", register_cmd, subtypes(it_glue));
    primitive("muskip", register_cmd, subtypes(it_mu));

    // max_internal
    advance_token = primitive("advance", advance_cmd);
    primitive("multiply", multiply_cmd);
    primitive("divide", divide_cmd);
    global_token = primitive("global", prefix_cmd, global_code);
    primitive("long", prefix_cmd, long_code);
    primitive("outer", prefix_cmd, outer_code);
    let_token = primitive("let", let_cmd, let_code);
    primitive("futurelet", let_cmd, futurelet_code);
    primitive("chardef", shorthand_def_cmd, char_def_code);
    primitive("mathchardef", shorthand_def_cmd, math_char_def_code);
    primitive("countdef", shorthand_def_cmd, count_def_code);
    primitive("dimendef", shorthand_def_cmd, dimen_def_code);
    primitive("skipdef", shorthand_def_cmd, skip_def_code);
    primitive("muskipdef", shorthand_def_cmd, mu_skip_def_code);
    primitive("toksdef", shorthand_def_cmd, toks_def_code);
    primitive("read", read_to_cs_cmd, zero_code);
    primitive("xdef", def_cmd, xdef_code);
    def_token = primitive("def", def_cmd, def_code);
    primitive("gdef", def_cmd, gdef_code);
    primitive("edef", def_cmd, edef_code);
    primitive("newcommand", def_cmd, newcommand_code);
    primitive("CheckCommand", def_cmd, checkcommand_code);
    primitive("newtheorem", def_cmd, newthm_code);
    primitive("newenvironment", def_cmd, newenv_code);
    primitive("renewenvironment", def_cmd, renewenv_code);
    primitive("renewcommand", def_cmd, renew_code);
    primitive("providecommand", def_cmd, provide_code);
    primitive("DeclareMathOperator", def_cmd, declare_math_operator_code);
    primitive("DeclareRobustCommand", def_cmd, provide_code);
    primitive("setbox", set_box_cmd);
    primitive("@setmode", setmode_cmd);
    primitive("theoremstyle", thm_aux_cmd, theorem_style_code);
    primitive("theorembodyfont", thm_aux_cmd, theorem_bodyfont_code);
    primitive("theoremheaderfont", thm_aux_cmd, theorem_headerfont_code);
    bth_token = primitive("@begintheorem", start_thm_cmd, zero_code);
    primitive("@ybegintheorem", start_thm_cmd, zero_code);
    primitive("@xbegintheorem", start_thm_cmd, one_code);
    eth_token = primitive("@endtheorem", start_thm_cmd, two_code);
    primitive("batchmode", set_interaction_cmd, batchmode_code);
    primitive("nonstopmode", set_interaction_cmd, nonstopmode_code);
    primitive("scrollmode", set_interaction_cmd, scrollmode_code);
    primitive("errorstopmode", set_interaction_cmd, errorstopmode_code);
    primitive("@car", car_cmd, zero_code);
    primitive("@cdr", car_cmd, one_code);
    primitive("@testopt", testopt_cmd);
    primitive("@cons", cons_cmd);
    primitive("@afterfi", afterfi_cmd);
    primitive("@afterelsefi", afterelsefi_cmd);
    primitive("typein", typein_cmd);
    primitive("@gobble", gobble_cmd, subtypes(1));
    primitive("@gobbletwo", gobble_cmd, subtypes(2));
    primitive("@gobblefour", gobble_cmd, subtypes(4));
    // maxcommand
    primitive("xspace", xspace_cmd);
    primitive("the", the_cmd, the_code);
    primitive("strip@pt", strippt_cmd, the_code);
    number_token = primitive("number", convert_cmd, number_code);
    primitive("two@digits", convert_cmd, twodigits_code);
    primitive("@arabic", convert_cmd, at_arabic_code);
    roman_numeral_token = primitive("romannumeral", convert_cmd, romannumeral_code);
    Roman_numeral_token = primitive("Romannumeral", convert_cmd, Romannumeral_code);
    primitive("string", convert_cmd, string_code);
    primitive("meaning", convert_cmd, meaning_code);
    primitive("fontname", convert_cmd, fontname_code);
    primitive("jobname", convert_cmd, jobname_code);
    primitive("XMLgetatt", convert_cmd, attributeval_code);
    primitive("tralicsversion", convert_cmd, tralicsversion_code);
    primitive("@onelevel@sanitize", convert_cmd, sanitize_code);
    primitive("[", obracket_cmd);
    primitive("]", obracket_cmd, one_code);
    primitive("(", oparen_cmd);
    primitive(")", oparen_cmd, one_code);
    csname_token      = primitive("csname", csname_cmd);
    expandafter_token = primitive("expandafter", expandafter_cmd);
    primitive("noexpand", noexpand_cmd);
    primitive("@scanupdown", scan_up_down_cmd);
    primitive("sideset", sideset_cmd);
    primitive("tralics@split", split_cmd);
    primitive("a", a_cmd);
    primitive("'", accent_cmd, subtypes('\''));
    primitive("`", accent_cmd, subtypes('`'));
    primitive("\"", accent_cmd, subtypes('"'));
    primitive("^", accent_cmd, subtypes('^'));
    primitive("~", accent_cmd, subtypes('~'));
    primitive("k", accent_cmd, subtypes('k'));
    primitive("H", accent_cmd, subtypes('H'));
    primitive("v", accent_cmd, subtypes('v'));
    primitive("b", accent_cmd, subtypes('b'));
    primitive("d", accent_cmd, subtypes('d'));
    primitive("u", accent_cmd, subtypes('u'));
    primitive("C", accent_cmd, subtypes('C'));
    primitive("f", accent_cmd, subtypes('f'));
    primitive("c", accent_cmd, subtypes('c'));
    primitive(".", accent_cmd, subtypes('.'));
    primitive("=", accent_cmd, subtypes('='));
    primitive("r", accent_cmd, subtypes('r'));
    primitive("T", accent_cmd, subtypes('T'));
    primitive("V", accent_cmd, subtypes('V'));
    primitive("D", accent_cmd, subtypes('D'));
    primitive("h", accent_cmd, subtypes('h'));
    // Other accent
    primitive("IJ", specchar_cmd, subtypes(0x132));
    primitive("ij", specchar_cmd, subtypes(0x133));
    primitive("l", specchar_cmd, subtypes(0x142));
    primitive("L", specchar_cmd, subtypes(0x141));
    primitive("ng", specchar_cmd, subtypes(0x14B));
    primitive("NG", specchar_cmd, subtypes(0x14A));
    primitive("OE", specchar_cmd, subtypes(0x152));
    primitive("oe", specchar_cmd, subtypes(0x153));

    primitive("loop", loop_cmd);
    killcounter_token = primitive("@stpelt", counter_cmd, killcounter_code);
    stepcounter_token = primitive("stepcounter", counter_cmd, stepcounter_code);
    primitive("addtocounter", counter_cmd, addtocounter_code);
    primitive("setcounter", counter_cmd, setcounter_code);
    primitive("value", counter_cmd, value_code);
    primitive("@addtoreset", counter_cmd, addtoreset_code);
    primitive("setlength", setlength_cmd, zero_code);
    primitive("addtolength", setlength_cmd, one_code);
    primitive("UseVerb", useverb_cmd);
    primitive("@firstofone", all_of_one_cmd, zero_code);
    primitive("@firstoftwo", first_of_two_cmd, one_code);
    primitive("@secondoftwo", first_of_two_cmd, two_code);
    composite_token = primitive("@unicode@composite", all_of_one_cmd);

    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    primitive("@whilenum", while_cmd, zero_code);
    primitive("@whiledim", while_cmd, one_code);
    primitive("@whilesw", while_cmd, two_code);
    iwhilenum_token = primitive("@iwhilenum", iwhile_cmd, zero_code);
    iwhiledim_token = primitive("@iwhiledim", iwhile_cmd, one_code);
    iwhilesw_token  = primitive("@iwhilesw", iwhile_cmd, two_code);
    do_token        = locate("do");
    doubleat_token  = locate("@@");

    primitive("if", if_test_cmd, if_char_code);
    primitive("ifcat", if_test_cmd, if_cat_code);
    ifnum_token = primitive("ifnum", if_test_cmd, if_int_code);
    ifdim_token = primitive("ifdim", if_test_cmd, if_dim_code);
    primitive("ifodd", if_test_cmd, if_odd_code);
    primitive("ifvmode", if_test_cmd, if_vmode_code);
    primitive("ifhmode", if_test_cmd, if_hmode_code);
    primitive("ifmmode", if_test_cmd, if_mmode_code);
    primitive("ifinner", if_test_cmd, if_inner_code);
    primitive("ifvoid", if_test_cmd, if_void_code);
    primitive("ifhbox", if_test_cmd, if_hbox_code);
    primitive("ifvbox", if_test_cmd, if_vbox_code);
    primitive("ifx", if_test_cmd, ifx_code);
    primitive("ifeof", if_test_cmd, if_eof_code);
    primitive("ifleapyear", if_test_cmd, if_leapyear_code);
    iftrue_token  = primitive("iftrue", if_test_cmd, if_true_code);
    iffalse_token = primitive("iffalse", if_test_cmd, if_false_code);
    primitive("ifcase", if_test_cmd, if_case_code);
    fi_token     = primitive("fi", fi_or_else_cmd, fi_code);
    repeat_token = primitive("repeat", fi_or_else_cmd, fi_code);
    or_token     = primitive("or", fi_or_else_cmd, or_code);
    else_token   = primitive("else", fi_or_else_cmd, else_code);
    primitive("ChangeElementName", change_element_name_cmd);
    primitive("verb", verb_cmd);
    verb_token = primitive(" verb", verb_cmd, one_code);
    primitive("topmark", top_bot_mark_cmd, topmark_code);
    primitive("firstmark", top_bot_mark_cmd, firstmark_code);
    primitive("botmark", top_bot_mark_cmd, botmark_code);
    primitive("splitfirstmark", top_bot_mark_cmd, splitfirstmark_code);
    primitive("splitbotmark", top_bot_mark_cmd, splitbotmark_code);
    primitive("ClassError", latex_error_cmd, classerror_code);
    primitive("ClassWarning", latex_error_cmd, classwarning_code);
    primitive("ClassWarningNoLine", latex_error_cmd, classwarningnoline_code);
    primitive("ClassInfo", latex_error_cmd, classinfo_code);
    primitive("PackageError", latex_error_cmd, packageerror_code);
    primitive("PackageWarning", latex_error_cmd, packagewarning_code);
    primitive("PackageWarningNoLine", latex_error_cmd, packagewarningnoline_code);
    primitive("PackageInfo", latex_error_cmd, packageinfo_code);
    primitive("GenericError", latex_error_cmd, genericerror_code);
    primitive("GenericInfo", latex_error_cmd, genericinfo_code);
    primitive("GenericWarning", latex_error_cmd, genericwarning_code);
    primitive("MessageBreak", latex_error_cmd, messagebreak_code);
    primitive("@latex@error", latex_error_cmd, latexerror_code);
    primitive("@latex@warning", latex_error_cmd, latexwarning_code);
    primitive("@latex@warning@no@line", latex_error_cmd, latexwarningnoline_code);
    primitive("@latex@info", latex_error_cmd, latexinfo_code);
    primitive("@latex@info@no@line", latex_error_cmd, latexinfonoline_code);
    primitive("formatdate", formatdate_cmd);
    primitive("numberwithin", numberwithin_cmd);
    primitive("@ifdefinable", ifdefinable_cmd);
    dblarg_token = primitive("@dblarg", dblarg_cmd);
    primitive("refstepcounter", refstepcounter_cmd);
    primitive("tralics@makelabel", makelabel_cmd);
    nomathsw0_token = primitive("@nomathswi", nomath_cmd, zero_code);
    nomathsw1_token = primitive("@nomathswii", nomath_cmd, one_code);
    primitive("@nomathsws", nomath_cmd, two_code);
    primitive("@nomathswm", nomath_cmd, three_code);
    primitive("@nomathswe", nomath_cmd, subtypes(4));

    // xkeyval
    primitive("tralics@addtolist@n", add_to_macro_cmd, zero_code);
    primitive("tralics@addtolist@o", add_to_macro_cmd, one_code);
    primitive("@expandtwoargs", expandtwoargs_cmd);
    primitive("@removeelement", removeelement_cmd);
    primitive("tralics@for@n", for_cmd, xkv_for_n_code);
    primitive("tralics@for@en", for_cmd, xkv_for_en_code);
    primitive("@for", for_cmd, for_code);
    primitive("@tfor", for_cmd, tfor_code);
    forloop_token  = primitive("@forloop", for_cmd, forloop_code);
    iforloop_token = primitive("@iforloop", for_cmd, iforloop_code);
    tforloop_token = primitive("@tforloop", for_cmd, tforloop_code);
    primitive("@break@tfor", for_cmd, breaktfor_code);
    primitive("tralics@for@break", for_cmd, xkv_breaktfor_code);
    xkv_for_i_token = primitive("tralics@for@i", for_cmd, xkv_for_i_code);
    primitive("tralics@for@o", for_cmd, xkv_for_o_code);
    primitive("tralics@for@eo", for_cmd, xkv_for_eo_code);
    primitive("@selective@sanitize", selective_sanitize_cmd);
    primitive("definecolor", color_cmd, definecolor_code);
    primitive("normalcolor", color_cmd, normalcolor_code);
    primitive("color", color_cmd, color_code);
    primitive("pagecolor", color_cmd, pagecolor_code);
    primitive("colorbox", color_cmd, colorbox_code);
    primitive("fcolorbox", color_cmd, fcolorbox_code);

    isodd_token           = locate("isodd");
    verb_prefix_token     = locate("verbprefix");
    verbatim_prefix_token = locate("verbatimprefix");
    isundefined_token     = locate("isundefined");
    urlfont_token         = locate("urlfont");
    lengthtest_token      = locate("lengthtest");
    boolean_token         = locate("boolean");
    equal_token           = locate("equal");
    not_token             = locate("not");
    and_token             = locate("and");
    NOT_token             = locate("NOT");
    AND_token             = locate("AND");
    OR_token              = locate("OR");
    ratio_token           = locate("ratio");
    real_token            = locate("real");
    prime_token           = locate("prime");
    operatorname_token    = locate("operatorname");
    elt_token             = locate("@elt");
    nil_token             = locate("@nil");
    dagger_token          = locate("dagger");
    ddagger_token         = locate("ddagger");
    vbar_token            = locate("|");
    primitive("of", self_insert_cmd);
    verbatim_font        = locate("verbatimfont");
    verbatim_number_font = locate("verbatimnumberfont");
    gobble_token         = locate("@gobble");
    gobbletwo_token      = locate("@gobbletwo");
    xscale_token         = locate("xscale");
    yscale_token         = locate("yscale");
    xscaley_token        = locate("xscaley");
    yscalex_token        = locate("yscalex");
    refname_token        = locate("refname");
    footcite_sep_token   = locate("footcitesep");
    footcite_pre_token   = locate("footcitepre");
    cite_punct_token     = locate("citepunct");
    itemlabel_token      = locate("@itemlabel");
    cite_type_token      = locate("cite@@type");
    cite_prenote_token   = locate("cite@prenote");
    headercr_token       = locate("@headercr");
    lbrace_token         = locate("lbrace");
    rbrace_token         = locate("rbrace");
    locate("@tag");  // \todo useless alone?
    locate("qquad"); // \todo useless alone?
    nocase_e_token           = locate("NoCaseChange");
    nocase_i_token           = locate("@NoCaseChange");
    cite_e_token             = locate("cite");
    cite_i_token             = locate("@tc@cite");
    ref_i_token              = locate("@tc@ref");
    ensuremath_i_token       = locate("@tc@ensuremath");
    label_i_token            = locate("@tc@label");
    intrue_token             = locate("in@true");
    infalse_token            = locate("in@false");
    CurrentOption_token      = locate("CurrentOption");
    CurrentOptionKey_token   = locate("CurrentOptionKey");
    CurrentOptionValue_token = locate("CurrentOptionValue");
    locate("incr@eqnum"); // \todo useless alone?
    at_zero_token = locate("z@");
    at_one_token  = locate("@ne");
}

// This is done only if fancy_hdr is loaded (via \usepackage).
void Hashtab::boot_fancyhdr() {
    primitive("lhead", fancy_cmd, fancy_lhead_code);
    primitive("chead", fancy_cmd, fancy_chead_code);
    primitive("rhead", fancy_cmd, fancy_rhead_code);
    primitive("lfoot", fancy_cmd, fancy_lfoot_code);
    primitive("cfoot", fancy_cmd, fancy_cfoot_code);
    primitive("rfoot", fancy_cmd, fancy_rfoot_code);
    primitive("fancyhead", fancy_cmd, fancy_head_code);
    primitive("fancyfoot", fancy_cmd, fancy_foot_code);
    primitive("fancyhf", fancy_cmd, fancy_hf_code);
    primitive("fancyinternal", xfancy_cmd);
    primitive("inert@thepage", xthepage_cmd);
}

void Hashtab::boot_latex3() {
    // renaming everything
    eval_let("tex_space:D", " ");
    eval_let("tex_italiccorrection:D", "/");
    eval_let("tex_hyphen:D", "-");
    eval_let("tex_let:D", "let");
    eval_let("tex_def:D", "def");
    eval_let("tex_edef:D", "edef");
    eval_let("tex_gdef:D", "gdef");
    eval_let("tex_xdef:D", "xdef");
    eval_let("tex_chardef:D", "chardef");
    eval_let("tex_countdef:D", "countdef");
    eval_let("tex_dimendef:D", "dimendef");
    eval_let("tex_skipdef:D", "skipdef");
    eval_let("tex_muskipdef:D", "muskipdef");
    eval_let("tex_mathchardef:D", "mathchardef");
    eval_let("tex_toksdef:D", "toksdef");
    eval_let("tex_futurelet:D", "futurelet");
    eval_let("tex_advance:D", "advance");
    eval_let("tex_divide:D", "divide");
    eval_let("tex_multiply:D", "multiply");
    eval_let("tex_font:D", "font");
    eval_let("tex_fam:D", "fam");
    eval_let("tex_global:D", "global");
    eval_let("tex_long:D", "long");
    eval_let("tex_outer:D", "outer");
    eval_let("tex_setlanguage:D", "setlanguage");
    eval_let("tex_setlanguage:D", "setlanguage");
    eval_let("tex_globaldefs:D", "globaldefs");
    eval_let("tex_afterassignment:D", "afterassignment");
    eval_let("tex_aftergroup:D", "aftergroup");
    eval_let("tex_expandafter:D", "expandafter");
    eval_let("tex_noexpand:D", "noexpand");
    eval_let("tex_begingroup:D", "begingroup");
    eval_let("tex_endgroup:D", "endgroup");
    eval_let("tex_halign:D", "halign");
    eval_let("tex_valign:D", "valign");
    eval_let("tex_cr:D", "cr");
    eval_let("tex_crcr:D", "crcr");
    eval_let("tex_noalign:D", "noalign");
    eval_let("tex_omit:D", "omit");
    eval_let("tex_span:D", "span");
    eval_let("tex_tabskip:D", "tabskip");
    eval_let("tex_everycr:D", "everycr");
    eval_let("tex_if:D", "if");
    eval_let("tex_ifcase:D", "ifcase");
    eval_let("tex_ifcat:D", "ifcat");
    eval_let("tex_ifnum:D", "ifnum");
    eval_let("tex_ifodd:D", "ifodd");
    eval_let("tex_ifdim:D", "ifdim");
    eval_let("tex_ifeof:D", "ifeof");
    eval_let("tex_ifhbox:D", "ifhbox");
    eval_let("tex_ifvbox:D", "ifvbox");
    eval_let("tex_ifvoid:D", "ifvoid");
    eval_let("tex_ifx:D", "ifx");
    eval_let("tex_iffalse:D", "iffalse");
    eval_let("tex_iftrue:D", "iftrue");
    eval_let("tex_ifhmode:D", "ifhmode");
    eval_let("tex_ifmmode:D", "ifmmode");
    eval_let("tex_ifvmode:D", "ifvmode");
    eval_let("tex_ifinner:D", "ifinner");
    eval_let("tex_fi:D", "fi");
    eval_let("tex_else:D", "else");
    eval_let("tex_or:D", "or");
    eval_let("tex_immediate:D", "immediate");
    eval_let("tex_closeout:D", "closeout");
    eval_let("tex_openin:D", "openin");
    eval_let("tex_openout:D", "openout");
    eval_let("tex_read:D", "read");
    eval_let("tex_write:D", "write");
    eval_let("tex_closein:D", "closein");
    eval_let("tex_newlinechar:D", "newlinechar");
    eval_let("tex_input:D", "input");
    eval_let("tex_endinput:D", "endinput");
    eval_let("tex_inputlineno:D", "inputlineno");
    eval_let("tex_errmessage:D", "errmessage");
    eval_let("tex_message:D", "message");
    eval_let("tex_show:D", "show");
    eval_let("tex_showthe:D", "showthe");
    eval_let("tex_showbox:D", "showbox");
    eval_let("tex_showlists:D", "showlists");
    eval_let("tex_errhelp:D", "errhelp");
    eval_let("tex_errorcontextlines:D", "errorcontextlines");
    eval_let("tex_tracingcommands:D", "tracingcommands");
    eval_let("tex_tracinglostchars:D", "tracinglostchars");
    eval_let("tex_tracingmacros:D", "tracingmacros");
    eval_let("tex_tracingonline:D", "tracingonline");
    eval_let("tex_tracingoutput:D", "tracingoutput");
    eval_let("tex_tracingpages:D", "tracingpages");
    eval_let("tex_tracingparagraphs:D", "tracingparagraphs");
    eval_let("tex_tracingrestores:D", "tracingrestores");
    eval_let("tex_tracingstats:D", "tracingstats");
    eval_let("tex_pausing:D", "pausing");
    eval_let("tex_showboxbreadth:D", "showboxbreadth");
    eval_let("tex_showboxdepth:D", "showboxdepth");
    eval_let("tex_batchmode:D", "batchmode");
    eval_let("tex_errorstopmode:D", "errorstopmode");
    eval_let("tex_nonstopmode:D", "nonstopmode");
    eval_let("tex_scrollmode:D", "scrollmode");
    eval_let("tex_end:D", "end");
    eval_let("tex_csname:D", "csname");
    eval_let("tex_endcsname:D", "endcsname");
    eval_let("tex_ignorespaces:D", "ignorespaces");
    eval_let("tex_relax:D", "relax");
    eval_let("tex_the:D", "the");
    eval_let("tex_mag:D", "mag");
    eval_let("tex_language:D", "language");
    eval_let("tex_mark:D", "mark");
    eval_let("tex_topmark:D", "topmark");
    eval_let("tex_firstmark:D", "firstmark");
    eval_let("tex_botmark:D", "botmark");
    eval_let("tex_splitfirstmark:D", "splitfirstmark");
    eval_let("tex_splitbotmark:D", "splitbotmark");
    eval_let("tex_fontname:D", "fontname");
    eval_let("tex_escapechar:D", "escapechar");
    eval_let("tex_endlinechar:D", "endlinechar");
    eval_let("tex_mathchoice:D", "mathchoice");
    eval_let("tex_delimiter:D", "delimiter");
    eval_let("tex_mathaccent:D", "mathaccent");
    eval_let("tex_mathchar:D", "mathchar");
    eval_let("tex_mskip:D", "mskip");
    eval_let("tex_radical:D", "radical");
    eval_let("tex_vcenter:D", "vcenter");
    eval_let("tex_mkern:D", "mkern");
    eval_let("tex_above:D", "above");
    eval_let("tex_abovewithdelims:D", "abovewithdelims");
    eval_let("tex_atop:D", "atop");
    eval_let("tex_atopwithdelims:D", "atopwithdelims");
    eval_let("tex_over:D", "over");
    eval_let("tex_overwithdelims:D", "overwithdelims");
    eval_let("tex_displaystyle:D", "displaystyle");
    eval_let("tex_textstyle:D", "textstyle");
    eval_let("tex_scriptscriptstyle:D", "scriptscriptstyle");
    eval_let("tex_scriptstyle:D", "scriptstyle");
    eval_let("tex_nonscript:D", "nonscript");
    eval_let("tex_eqno:D", "eqno");
    eval_let("tex_abovedisplayshortskip:D", "abovedisplayshortskip");
    eval_let("tex_abovedisplayskip:D", "abovedisplayskip");
    eval_let("tex_belowdisplayshortskip:D", "belowdisplayshortskip");
    eval_let("tex_belowdisplayskip:D", "belowdisplayskip");
    eval_let("tex_displaywidowpenalty:D", "displaywidowpenalty");
    eval_let("tex_displayindent:D", "displayindent");
    eval_let("tex_displaywidth:D", "displaywidth");
    eval_let("tex_everydisplay:D", "everydisplay");
    eval_let("tex_predisplaysize:D", "predisplaysize");
    eval_let("tex_predisplaypenalty:D", "predisplaypenalty");
    eval_let("tex_postdisplaypenalty:D", "postdisplaypenalty");
    eval_let("tex_mathbin:D", "mathbin");
    eval_let("tex_mathclose:D", "mathclose");
    eval_let("tex_mathinner:D", "mathinner");
    eval_let("tex_mathop:D", "mathop");
    eval_let("tex_displaylimits:D", "displaylimits");
    eval_let("tex_limits:D", "limits");
    eval_let("tex_nolimits:D", "nolimits");
    eval_let("tex_mathopen:D", "mathopen");
    eval_let("tex_mathord:D", "mathord");
    eval_let("tex_mathpunct:D", "mathpunct");
    eval_let("tex_mathpunct:D", "mathpunct");
    eval_let("tex_mathrel:D", "mathrel");
    eval_let("tex_overline:D", "overline");
    eval_let("tex_underline:D", "underline");
    eval_let("tex_left:D", "left");
    eval_let("tex_right:D", "right");
    eval_let("tex_binoppenalty:D", "binoppenalty");
    eval_let("tex_relpenalty:D", "relpenalty");
    eval_let("tex_delimitershortfall:D", "delimitershortfall");
    eval_let("tex_delimiterfactor:D", "delimiterfactor");
    eval_let("tex_nulldelimiterspace:D", "nulldelimiterspace");
    eval_let("tex_everymath:D", "everymath");
    eval_let("tex_mathsurround:D", "mathsurround");
    eval_let("tex_medmuskip:D", "medmuskip");
    eval_let("tex_thinmuskip:D", "thinmuskip");
    eval_let("tex_thickmuskip:D", "thickmuskip");
    eval_let("tex_scriptspace:D", "scriptspace");
    eval_let("tex_noboundary:D", "noboundary");
    eval_let("tex_char:D", "char");
    eval_let("tex_discretionary:D", "discretionary");
    eval_let("tex_hfil:D", "hfil");
    eval_let("tex_hfilneg:D", "hfilneg");
    eval_let("tex_hfill:D", "hfill");
    eval_let("tex_hskip:D", "hskip");
    eval_let("tex_hss:D", "hss");
    eval_let("tex_vfil:D", "vfil");
    eval_let("tex_vfilneg:D", "vfilneg");
    eval_let("tex_vfill:D", "vfill");
    eval_let("tex_vskip:D", "vskip");
    eval_let("tex_vss:D", "vss");
    eval_let("tex_unskip:D", "unskip");
    eval_let("tex_kern:D", "kern");
    eval_let("tex_unkern:D", "unkern");
    eval_let("tex_hrule:D", "hrule");
    eval_let("tex_vrule:D", "vrule");
    eval_let("tex_leaders:D", "leaders");
    eval_let("tex_cleaders:D", "cleaders");
    eval_let("tex_xleaders:D", "xleaders");
    eval_let("tex_lastkern:D", "lastkern");
    eval_let("tex_lastskip:D", "lastskip");
    eval_let("tex_indent:D", "indent");
    eval_let("tex_par:D", "par");
    eval_let("tex_noindent:D", "noindent");
    eval_let("tex_vadjust:D", "vadjust");
    eval_let("tex_baselineskip:D", "baselineskip");
    eval_let("tex_lineskip:D", "lineskip");
    eval_let("tex_lineskiplimit:D", "lineskiplimit");
    eval_let("tex_clubpenalty:D", "clubpenalty");
    eval_let("tex_widowpenalty:D", "widowpenalty");
    eval_let("tex_exhyphenpenalty:D", "exhyphenpenalty");
    eval_let("tex_hyphenpenalty:D", "hyphenpenalty");
    eval_let("tex_linepenalty:D", "linepenalty");
    eval_let("tex_doublehyphendemerits:D", "doublehyphendemerits");
    eval_let("tex_finalhyphendemerits:D", "finalhyphendemerits");
    eval_let("tex_adjdemerits:D", "adjdemerits");
    eval_let("tex_hangafter:D", "hangafter");
    eval_let("tex_hangindent:D", "hangindent");
    eval_let("tex_parshape:D", "parshape");
    eval_let("tex_hsize:D", "hsize");
    eval_let("tex_lefthyphenmin:D", "lefthyphenmin");
    eval_let("tex_righthyphenmin:D", "righthyphenmin");
    eval_let("tex_leftskip:D", "leftskip");
    eval_let("tex_rightskip:D", "rightskip");
    eval_let("tex_looseness:D", "looseness");
    eval_let("tex_parskip:D", "parskip");
    eval_let("tex_parindent:D", "parindent");
    eval_let("tex_uchyph:D", "uchyph");
    eval_let("tex_emergencystretch:D", "emergencystretch");
    eval_let("tex_pretolerance:D", "pretolerance");
    eval_let("tex_tolerance:D", "tolerance");
    eval_let("tex_spaceskip:D", "spaceskip");
    eval_let("tex_xspaceskip:D", "xspaceskip");
    eval_let("tex_parfillskip:D", "parfillskip");
    eval_let("tex_everypar:D", "everypar");
    eval_let("tex_prevgraf:D", "prevgraf");
    eval_let("tex_spacefactor:D", "spacefactor");
    eval_let("tex_shipout:D", "shipout");
    eval_let("tex_vsize:D", "vsize");
    eval_let("tex_interlinepenalty:D", "interlinepenalty");
    eval_let("tex_brokenpenalty:D", "brokenpenalty");
    eval_let("tex_topskip:D", "topskip");
    eval_let("tex_maxdeadcycles:D", "maxdeadcycles");
    eval_let("tex_maxdepth:D", "maxdepth");
    eval_let("tex_output:D", "output");
    eval_let("tex_deadcycles:D", "deadcycles");
    eval_let("tex_pagedepth:D", "pagedepth");
    eval_let("tex_pagestretch:D", "pagestretch");
    eval_let("tex_pagefilstretch:D", "pagefilstretch");
    eval_let("tex_pagefillstretch:D", "pagefillstretch");
    eval_let("tex_pagefilllstretch:D", "pagefilllstretch");
    eval_let("tex_pageshrink:D", "pageshrink");
    eval_let("tex_pagegoal:D", "pagegoal");
    eval_let("tex_pagetotal:D", "pagetotal");
    eval_let("tex_outputpenalty:D", "outputpenalty");
    eval_let("tex_hoffset:D", "hoffset");
    eval_let("tex_voffset:D", "voffset");
    eval_let("tex_insert:D", "insert");
    eval_let("tex_holdinginserts:D", "holdinginserts");
    eval_let("tex_floatingpenalty:D", "floatingpenalty");
    eval_let("tex_insertpenalties:D", "insertpenalties");
    eval_let("tex_lower:D", "lower");
    eval_let("tex_moveleft:D", "moveleft");
    eval_let("tex_moveright:D", "moveright");
    eval_let("tex_raise:D", "raise");
    eval_let("tex_copy:D", "copy");
    eval_let("tex_lastbox:D", "lastbox");
    eval_let("tex_vsplit:D", "vsplit");
    eval_let("tex_unhbox:D", "unhbox");
    eval_let("tex_unhcopy:D", "unhcopy");
    eval_let("tex_unvbox:D", "unvbox");
    eval_let("tex_unvcopy:D", "unvcopy");
    eval_let("tex_setbox:D", "setbox");
    eval_let("tex_hbox:D", "hbox");
    eval_let("tex_vbox:D", "vbox");
    eval_let("tex_vtop:D", "vtop");
    eval_let("tex_prevdepth:D", "prevdepth");
    eval_let("tex_badness:D", "badness");
    eval_let("tex_hbadness:D", "hbadness");
    eval_let("tex_vbadness:D", "vbadness");
    eval_let("tex_hfuzz:D", "hfuzz");
    eval_let("tex_vfuzz:D", "vfuzz");
    eval_let("tex_overfullrule:D", "overfullrule");
    eval_let("tex_boxmaxdepth:D", "boxmaxdepth");
    eval_let("tex_splitmaxdepth:D", "splitmaxdepth");
    eval_let("tex_splittopskip:D", "splittopskip");
    eval_let("tex_everyhbox:D", "everyhbox");
    eval_let("tex_everyvbox:D", "everyvbox");
    eval_let("tex_nullfont:D", "nullfont");
    eval_let("tex_textfont:D", "textfont");
    eval_let("tex_scriptfont:D", "scriptfont");
    eval_let("tex_scriptscriptfont:D", "scriptscriptfont");
    eval_let("tex_fontdimen:D", "fontdimen");
    eval_let("tex_hyphenchar:D", "hyphenchar");
    eval_let("tex_skewchar:D", "skewchar");
    eval_let("tex_defaulthyphenchar:D", "defaulthyphenchar");
    eval_let("tex_defaultskewchar:D", "defaultskewchar");
    eval_let("tex_number:D", "number");
    eval_let("tex_romannumeral:D", "romannumeral");
    eval_let("tex_string:D", "string");
    eval_let("tex_lowercase:D", "lowercase");
    eval_let("tex_uppercase:D", "uppercase");
    eval_let("tex_meaning:D", "meaning");
    eval_let("tex_penalty:D", "penalty");
    eval_let("tex_unpenalty:D", "unpenalty");
    eval_let("tex_lastpenalty:D", "lastpenalty");
    eval_let("tex_special:D", "special");
    eval_let("tex_dump:D", "dump");
    eval_let("tex_patterns:D", "patterns");
    eval_let("tex_hyphenation:D", "hyphenation");
    eval_let("tex_time:D", "time");
    eval_let("tex_day:D", "day");
    eval_let("tex_month:D", "month");
    eval_let("tex_year:D", "year");
    eval_let("tex_jobname:D", "jobname");
    eval_let("tex_everyjob:D", "everyjob");
    eval_let("tex_count:D", "count");
    eval_let("tex_dimen:D", "dimen");
    eval_let("tex_skip:D", "skip");
    eval_let("tex_toks:D", "toks");
    eval_let("tex_muskip:D", "muskip");
    eval_let("tex_box:D", "box");
    eval_let("tex_wd:D", "wd");
    eval_let("tex_ht:D", "ht");
    eval_let("tex_dp:D", "dp");
    eval_let("tex_catcode:D", "catcode");
    eval_let("tex_delcode:D", "delcode");
    eval_let("tex_sfcode:D", "sfcode");
    eval_let("tex_lccode:D", "lccode");
    eval_let("tex_uccode:D", "uccode");
    eval_let("tex_mathcode:D", "mathcode");
    eval_let("etex_ifdefined:D", "ifdefined");
    eval_let("etex_ifcsname:D", "ifcsname");
    eval_let("etex_unless:D", "unless");
    eval_let("etex_eTeXversion:D", "eTeXversion");
    eval_let("etex_eTeXrevision:D", "eTeXrevision");
    eval_let("etex_marks:D", "marks");
    eval_let("etex_topmarks:D", "topmarks");
    eval_let("etex_firstmarks:D", "firstmarks");
    eval_let("etex_botmarks:D", "botmarks");
    eval_let("etex_splitfirstmarks:D", "splitfirstmarks");
    eval_let("etex_splitbotmarks:D", "splitbotmarks");
    eval_let("etex_unexpanded:D", "unexpanded");
    eval_let("etex_detokenize:D", "detokenize");
    eval_let("etex_scantokens:D", "scantokens");
    eval_let("etex_showtokens:D", "showtokens");
    eval_let("etex_readline:D", "readline");
    eval_let("etex_tracingassigns:D", "tracingassigns");
    eval_let("etex_tracingscantokens:D", "tracingscantokens");
    eval_let("etex_tracingnesting:D", "tracingnesting");
    eval_let("etex_tracingifs:D", "tracingifs");
    eval_let("etex_currentiflevel:D", "currentiflevel");
    eval_let("etex_currentifbranch:D", "currentifbranch");
    eval_let("etex_currentiftype:D", "currentiftype");
    eval_let("etex_tracinggroups:D", "tracinggroups");
    eval_let("etex_currentgrouplevel:D", "currentgrouplevel");
    eval_let("etex_currentgrouptype:D", "currentgrouptype");
    eval_let("etex_showgroups:D", "showgroups");
    eval_let("etex_showifs:D", "showifs");
    eval_let("etex_interactionmode:D", "interactionmode");
    eval_let("etex_lastnodetype:D", "lastnodetype");
    eval_let("etex_iffontchar:D", "iffontchar");
    eval_let("etex_fontcharht:D", "fontcharht");
    eval_let("etex_fontchardp:D", "fontchardp");
    eval_let("etex_fontcharwd:D", "fontcharwd");
    eval_let("etex_fontcharic:D", "fontcharic");
    eval_let("etex_parshapeindent:D", "parshapeindent");
    eval_let("etex_parshapelength:D", "parshapelength");
    eval_let("etex_parshapedimen:D", "parshapedimen");
    eval_let("etex_numexpr:D", "numexpr");
    eval_let("etex_dimexpr:D", "dimexpr");
    eval_let("etex_glueexpr:D", "glueexpr");
    eval_let("etex_muexpr:D", "muexpr");
    eval_let("etex_gluestretch:D", "gluestretch");
    eval_let("etex_glueshrink:D", "glueshrink");
    eval_let("etexgluestretchorder_:D", "gluestretchorder");
    eval_let("etex_glueshrinkorder:D", "glueshrinkorder");
    eval_let("etex_gluetomu:D", "gluetomu");
    eval_let("etex_mutoglue:D", "mutoglue");
    eval_let("etex_lastlinefit:D", "lastlinefit");
    eval_let("etex_interlinepenalties:D", "interlinepenalties");
    eval_let("etex_clubpenalties:D", "clubpenalties");
    eval_let("etex_widowpenalties:D", "widowpenalties");
    eval_let("etex_displaywidowpenalties:D", "displaywidowpenalties");
    eval_let("etex_middle:D", "middle");
    eval_let("etex_savinghyphcodes:D", "savinghyphcodes");
    eval_let("etex_savingvdiscards:D", "savingvdiscards");
    eval_let("etex_pagediscards:D", "pagediscards");
    eval_let("etex_splitdiscards:D", "splitdiscards");
    eval_let("etex_TeXXeTstate:D", "TeXXeTstate");
    eval_let("etex_beginL:D", "beginL");
    eval_let("etex_endL:D", "endL");
    eval_let("etex_beginR:D", "beginR");
    eval_let("etex_endR:D", "endR");
    eval_let("etex_predisplaydirection:D", "predisplaydirection");
    eval_let("etex_everyeof:D", "everyeof");
    eval_let("etex_protected:D", "protected");
    eval_let("pdftex_strcmp:D", "pdfstrcmp");

    // Definition of frozen@ ... without the unimp code
    // \let\frozen@everymath\everymath \let\frozen@everydisplay\everydisplay
    // \newtoks\everymath \newtoks\everydisplay
    // \frozen@everymath = {\the\everymath}
    // \frozen@everydisplay = {\the\everydisplay}
    // possible redef
    eval_let("tex_end:D", "@@end");
    eval_let("tex_input:D", "@@input");
    // eval_let("tex_underline:D", "@@underline"); // math only \underline
    // eval_let("tex_hyphen:D", "@@hyp");  is \-
    // eval_let("\tex_italiccorrection:D", "@@italiccorr");  is \/
    // eval_let("tex_everydisplay:D", "frozen@everydisplay"); not needed ?
    // eval_let("tex_everymath:D", "frozen@everymath")

    // other redefinitions
    eval_let("if_true:", "tex_iftrue:D");
    eval_let("if_false:", "tex_iffalse:D");
    eval_let("or:", "tex_or:D");
    eval_let("else:", "tex_else:D");
    eval_let("fi:", "tex_fi:D");
    eval_let("reverse_if:N", "etex_unless:D");
    eval_let("if:w", "tex_if:D");
    eval_let("if_charcode:w", "tex_if:D");
    eval_let("if_catcode:w", "tex_ifcat:D");
    eval_let("if_meaning:w", "tex_ifx:D");
    eval_let("if_mode_math:", "tex_ifmmode:D");
    eval_let("if_mode_horizontal:", "tex_ifhmode:D");
    eval_let("if_mode_vertical:", "tex_ifvmode:D");
    eval_let("if_mode_inner:", "tex_ifinner:D");
    eval_let("if_cs_exist:N", "etex_ifdefined:D");
    eval_let("if_cs_exist:w", "etex_ifcsname:D");
    eval_let("cs:w", "tex_csname:D");
    eval_let("cs_end:", "tex_endcsname:D");
    eval_let("exp_after:wN", "tex_expandafter:D");
    T_exp_notN = eval_let("exp_not:N", "tex_noexpand:D");
    T_exp_notn = eval_let("exp_not:n", "etex_unexpanded:D");
    eval_let("token_to_meaning:N", "tex_meaning:D");
    eval_let("token_to_str:N", "tex_string:D");
    eval_let("cs_meaning:N", "tex_meaning:D");
    eval_let("scan_stop:", "tex_relax:D");
    eval_let("group_begin:", "tex_begingroup:D");
    eval_let("group_end:", "tex_endgroup:D");
    eval_let("if_int_compare:w", "tex_ifnum:D");
    eval_let("__int_to_roman:w", "tex_romannumeral:D");
    eval_let("group_insert_after:N", "tex_aftergroup:D");
    eval_let("c_minus_one", "m@ne");
    eval_let("cs_set_nopar:Npn", "tex_def:D");
    eval_let("cs_set_nopar:Npx", "tex_edef:D");
    eval_let("cs_gset_nopar:Npn", "tex_gdef:D");
    eval_let("cs_gset_nopar:Npx", "tex_xdef:D");
    T_use1 = eval_let("use_i:nn", "@firstoftwo");
    T_use2 = eval_let("use_ii:nn", "@secondoftwo");
    eval_let("__int_value:w", "tex_number:D");
    eval_let("__int_eval:w", "etex_numexpr:D");
    eval_let("__int_eval_end:", "tex_relax:D");
    eval_let("if_int_odd:w", "tex_ifodd:D");
    eval_let("if_case:w", "tex_ifcase:D");
    eval_let("prg_do_nothing:", "c_empty_tl");
    T_empty = locate("c_empty_tl");

    ExplFileName_token        = locate("ExplFileName");
    ExplFileDate_token        = locate("ExplFileDate");
    ExplFileVersion_token     = locate("ExplFileVersion");
    ExplFileDescription_token = locate("ExplFileDescription");
    locate("q_nil");
    locate("q_stop");
    locate("q_recursion_stop");
    T3col_tok = locate(":::");

    primitive("GetIdInfo", GetIdInfo_cmd);
    primitive("GetIdInfoLog", GetIdInfoLog_cmd);
    primitive("use:c", usename_cmd, zero_code);
    expargsnc_tok = primitive("exp_args:Nc", usename_cmd, one_code);
    primitive("exp_args:cc", usename_cmd, two_code);

    primitive("cs_meaning:c", convert_cmd, meaning_c_code);
    eval_let("token_to_meaning:c", "cs_meaning:c");
    primitive("cs_set:Npx", def_cmd, ledef_code);
    primitive("cs_set:Npn", def_cmd, ldef_code);
    primitive("cs_gset:Npx", def_cmd, lxdef_code);
    primitive("cs_gset:Npn", def_cmd, lgdef_code);
    primitive("cs_set_protected_nopar:Npx", def_cmd, pedef_code);
    primitive("cs_set_protected_nopar:Npn", def_cmd, pdef_code);
    primitive("cs_set_protected:Npx", def_cmd, pledef_code);
    primitive("cs_set_protected:Npn", def_cmd, pldef_code);
    primitive("cs_gset_protected_nopar:Npx", def_cmd, pxdef_code);
    primitive("cs_gset_protected_nopar:Npn", def_cmd, pgdef_code);
    primitive("cs_gset_protected:Npx", def_cmd, plxdef_code);
    primitive("cs_gset_protected:Npn", def_cmd, plgdef_code);
    primitive("cs_new_nopar:Npn", def_cmd, gdefn_code);
    primitive("cs_new_nopar:Npx", def_cmd, xdefn_code);
    primitive("cs_new:Npn", def_cmd, lgdefn_code);
    primitive("cs_new:Npx", def_cmd, lxdefn_code);
    primitive("cs_new_protected_nopar:Npn", def_cmd, pgdefn_code);
    primitive("cs_new_protected_nopar:Npx", def_cmd, pxdefn_code);
    primitive("cs_new_protected:Npn", def_cmd, plgdefn_code);
    primitive("cs_new_protected:Npx", def_cmd, plxdefn_code);

    primitive("cs_set_nopar:cpn", def_cmd, cdef_code);
    primitive("cs_set_nopar:cpx", def_cmd, cedef_code);
    primitive("cs_gset_nopar:cpn", def_cmd, cgdef_code);
    primitive("cs_gset_nopar:cpx", def_cmd, cxdef_code);
    primitive("cs_new_nopar:cpn", def_cmd, cgdefn_code);
    primitive("cs_new_nopar:cpx", def_cmd, cxdefn_code);
    primitive("cs_set:cpn", def_cmd, cldef_code);
    primitive("cs_set:cpx", def_cmd, cledef_code);
    primitive("cs_gset:cpn", def_cmd, clgdef_code);
    primitive("cs_gset:cpx", def_cmd, clxdef_code);
    primitive("cs_new:cpn", def_cmd, clgdefn_code);
    primitive("cs_new:cpx", def_cmd, clxdefn_code);
    primitive("cs_set_protected_nopar:cpn", def_cmd, cpdef_code);
    primitive("cs_set_protected_nopar:cpx", def_cmd, cpedef_code);
    primitive("cs_gset_protected_nopar:cpn", def_cmd, cpgdef_code);
    primitive("cs_gset_protected_nopar:cpx", def_cmd, cpxdef_code);
    primitive("cs_new_protected_nopar:cpn", def_cmd, cpgdefn_code);
    primitive("cs_new_protected_nopar:cpx", def_cmd, cpxdefn_code);
    primitive("cs_set_protected:cpn", def_cmd, cpldef_code);
    primitive("cs_set_protected:cpx", def_cmd, cpledef_code);
    primitive("cs_gset_protected:cpn", def_cmd, cplgdef_code);
    primitive("cs_gset_protected:cpx", def_cmd, cplxdef_code);
    primitive("cs_new_protected:cpn", def_cmd, cplgdefn_code);
    primitive("cs_new_protected:cpx", def_cmd, cplxdefn_code);

    T_usen = primitive("use:n", all_of_one_cmd, one_code);
    primitive("use:nn", all_of_one_cmd, two_code);
    primitive("use:nnn", all_of_one_cmd, three_code);
    primitive("use:nnnn", all_of_one_cmd, four_code);
    primitive("use_i_ii:nnn", all_of_one_cmd, subtypes(5));
    primitive("use_i:nnn", first_of_three_cmd, one_code);
    primitive("use_ii:nnn", first_of_three_cmd, two_code);
    primitive("use_iii:nnn", first_of_three_cmd, three_code);
    primitive("use_i:nnnn", first_of_four_cmd, one_code);
    primitive("use_ii:nnnn", first_of_four_cmd, two_code);
    primitive("use_iii:nnnn", first_of_four_cmd, three_code);
    primitive("use_iv:nnnn", first_of_four_cmd, four_code);
    T_use_nonen = primitive("use_none:n", ignore_n_args_cmd, one_code);
    primitive("use_none:nn", ignore_n_args_cmd, two_code);
    primitive("use_none:nnn", ignore_n_args_cmd, three_code);
    primitive("use_none:nnnn", ignore_n_args_cmd, four_code);
    primitive("use_none:nnnnn", ignore_n_args_cmd, subtypes(5));
    primitive("use_none:nnnnnn", ignore_n_args_cmd, subtypes(6));
    primitive("use_none:nnnnnnn", ignore_n_args_cmd, subtypes(7));
    primitive("use_none:nnnnnnnn", ignore_n_args_cmd, subtypes(8));
    primitive("use_none:nnnnnnnnn", ignore_n_args_cmd, subtypes(9));
    primitive("prg_return_true:", prg_return_cmd, zero_code);
    primitive("prg_return_false:", prg_return_cmd, one_code);
    primitive("prg_set_conditional:Npnn", l3_gen_cond_Npnn_cmd, L3_set_code);
    primitive("prg_new_conditional:Npnn", l3_gen_cond_Npnn_cmd, L3_new_code);
    primitive("prg_set_protected_conditional:Npnn", l3_gen_cond_Npnn_cmd, L3_setp_code);
    primitive("prg_new_protected_conditional:Npnn", l3_gen_cond_Npnn_cmd, L3_newp_code);
    primitive("prg_set_conditional:Nnn", l3_gen_cond_Nnn_cmd, L3_set_code);
    primitive("prg_new_conditional:Nnn", l3_gen_cond_Nnn_cmd, L3_new_code);
    primitive("prg_set_protected_conditional:Nnn", l3_gen_cond_Nnn_cmd, L3_setp_code);
    primitive("prg_new_protected_conditional:Nnn", l3_gen_cond_Nnn_cmd, L3_newp_code);
    primitive("prg_set_eq_conditional:NNn", l3_gen_eq_cond_cmd, L3_set_code);
    primitive("prg_new_eq_conditional:NNn", l3_gen_eq_cond_cmd, L3_new_code);
    primitive("cs_to_str:N", convert_cmd, l3string_code);
    primitive("__cs_get_function_name:N", splitfun_cmd, zero_code);
    primitive("__cs_get_function_signature:N", splitfun_cmd, one_code);
    primitive("iow_term:x", extension_cmd, write_term_code);
    primitive("iow_log:x", extension_cmd, write_log_code);
    primitive("__chk_if_free_cs:N", l3_check_cmd, zero_code);
    primitive("__chk_if_free_cs:c", l3_check_cmd, one_code);
    primitive("__chk_if_exist_cs:N", l3_check_cmd, two_code);
    primitive("__chk_if_exist_cs:c", l3_check_cmd, three_code);
    primitive("cs_set_eq:NN", let_cmd, letNN_code);
    primitive("cs_set_eq:cN", let_cmd, letcN_code);
    primitive("cs_set_eq:Nc", let_cmd, letNc_code);
    primitive("cs_set_eq:cc", let_cmd, letcc_code);
    primitive("cs_gset_eq:NN", let_cmd, gletNN_code);
    primitive("cs_gset_eq:cN", let_cmd, gletcN_code);
    primitive("cs_gset_eq:Nc", let_cmd, gletNc_code);
    primitive("cs_gset_eq:cc", let_cmd, gletcc_code);
    primitive("cs_new_eq:NN", let_cmd, nletNN_code);
    primitive("cs_new_eq:cN", let_cmd, nletcN_code);
    primitive("cs_new_eq:Nc", let_cmd, nletNc_code);
    primitive("cs_new_eq:cc", let_cmd, nletcc_code);
    primitive("cs_undefine:N", let_cmd, undef_code);
    primitive("cs_undefine:c", let_cmd, undefc_code);
    eval_let("tl_set_eq:NN", "cs_set_eq:NN");
    eval_let("tl_set_eq:cN", "cs_set_eq:cN");
    eval_let("tl_set_eq:Nc", "cs_set_eq:Nc");
    eval_let("tl_set_eq:cc", "cs_set_eq:cc");
    eval_let("tl_gset_eq:NN", "cs_gset_eq:NN");
    eval_let("tl_gset_eq:cN", "cs_gset_eq:cN");
    eval_let("tl_gset_eq:Nc", "cs_gset_eq:Nc");
    eval_let("tl_gset_eq:cc", "cs_gset_eq:cc");

    primitive("__kernel_register_show:N", xray_cmd, register_show_code);
    primitive("__kernel_register_show:c", xray_cmd, registerc_show_code);
    eval_let("int_show:N", "__kernel_register_show:N");
    eval_let("int_show:c", "__kernel_register_show:c");
    eval_let("dim_show:N", "__kernel_register_show:N");
    eval_let("dim_show:c", "__kernel_register_show:c");
    eval_let("skip_show:N", "__kernel_register_show:N");
    eval_let("skip_show:c", "__kernel_register_show:c");
    eval_let("muskip_show:N", "__kernel_register_show:N");
    eval_let("muskip_show:c", "__kernel_register_show:c");
    primitive("cs_generate_variant:Nn", l3_generate_variant_cmd);
    gen_from_sig_tok = primitive("__cs_generate_from_signature:NNn", l3_gen_from_sig_cmd);
    primitive("cs_generate_from_arg_count:NNnn", l3_gen_from_ac_cmd, zero_code);
    primitive("cs_generate_from_arg_count:cNnn", l3_gen_from_ac_cmd, one_code);
    primitive("cs_generate_from_arg_count:Ncnn", l3_gen_from_ac_cmd, two_code);
    primitive("::n", l3expand_aux_cmd, l3expn_code);
    primitive("::N", l3expand_aux_cmd, l3expN_code);
    primitive("::p", l3expand_aux_cmd, l3expp_code);
    primitive("::c", l3expand_aux_cmd, l3expc_code);
    primitive("::o", l3expand_aux_cmd, l3expo_code);
    primitive("::f", l3expand_aux_cmd, l3expf_code);
    primitive("::x", l3expand_aux_cmd, l3expx_code);
    primitive("::V", l3expand_aux_cmd, l3expV_code);
    primitive("::v", l3expand_aux_cmd, l3expv_code);
    primitive("::f_unbraced", l3expand_aux_cmd, l3expfu_code);
    primitive("::o_unbraced", l3expand_aux_cmd, l3expou_code);
    primitive("::v_unbraced", l3expand_aux_cmd, l3expvu_code);
    primitive("::V_unbraced", l3expand_aux_cmd, l3expVu_code);
    primitive("::x_unbraced", l3expand_aux_cmd, l3expxu_code);
    primitive("exp_not:c", l3noexpand_cmd, l3expc_code);
    primitive("exp_not:f", l3noexpand_cmd, l3expf_code);
    primitive("exp_not:o", l3noexpand_cmd, l3expo_code);
    primitive("exp_not:v", l3noexpand_cmd, l3expv_code);
    primitive("exp_not:V", l3noexpand_cmd, l3expV_code);
    primitive("exp_args:No", l3expand_base_cmd, l3exp_No_code);
    primitive("exp_args:NNo", l3expand_base_cmd, l3exp_NNo_code);
    primitive("exp_args:NNNo", l3expand_base_cmd, l3exp_NNNo_code);
    primitive("exp_args:NNc", l3expand_base_cmd, l3exp_NNc_code);
    primitive("exp_args:Ncc", l3expand_base_cmd, l3exp_Ncc_code);
    primitive("exp_args:Nccc", l3expand_base_cmd, l3exp_Nccc_code);
    primitive("exp_args:Nf", l3expand_base_cmd, l3exp_Nf_code);
    primitive("exp_args:NNf", l3expand_base_cmd, l3exp_NNf_code);
    primitive("exp_args:Nv", l3expand_base_cmd, l3exp_Nv_code);
    primitive("exp_args:NNv", l3expand_base_cmd, l3exp_NNv_code);
    primitive("exp_args:NV", l3expand_base_cmd, l3exp_NV_code);
    primitive("exp_args:NNV", l3expand_base_cmd, l3exp_NNV_code);
    primitive("exp_args:NNNV", l3expand_base_cmd, l3exp_NNNV_code);
    primitive("exp_args:Nco", l3expand_base_cmd, l3exp_Nco_code);
    primitive("exp_args:Ncf", l3expand_base_cmd, l3exp_Ncf_code);
    primitive("exp_args:NVV", l3expand_base_cmd, l3exp_NVV_code);
    primitive("exp_args:NcNc", l3expand_base_cmd, l3exp_NcNc_code);
    primitive("exp_args:Ncco", l3expand_base_cmd, l3exp_Ncco_code);
    primitive("exp_args:Nx", l3expand_base_cmd, l3exp_Nx_code);
    primitive("exp_args:Nnc", l3expand_base_cmd, l3exp_Nnc_code);
    primitive("exp_args:Nfo", l3expand_base_cmd, l3exp_Nfo_code);
    primitive("exp_args:Nff", l3expand_base_cmd, l3exp_Nff_code);
    primitive("exp_args:Nnf", l3expand_base_cmd, l3exp_Nnf_code);
    primitive("exp_args:Nno", l3expand_base_cmd, l3exp_Nno_code);
    primitive("exp_args:NnV", l3expand_base_cmd, l3exp_NnV_code);
    primitive("exp_args:Noo", l3expand_base_cmd, l3exp_Noo_code);
    primitive("exp_args:Nof", l3expand_base_cmd, l3exp_Nof_code);
    primitive("exp_args:Noc", l3expand_base_cmd, l3exp_Noc_code);
    primitive("exp_args:NNx", l3expand_base_cmd, l3exp_NNx_code);
    primitive("exp_args:Ncx", l3expand_base_cmd, l3exp_Ncx_code);
    primitive("exp_args:Nnx", l3expand_base_cmd, l3exp_Nnx_code);
    primitive("exp_args:Nox", l3expand_base_cmd, l3exp_Nox_code);
    primitive("exp_args:Nxo", l3expand_base_cmd, l3exp_Nxo_code);
    primitive("exp_args:Nxx", l3expand_base_cmd, l3exp_Nxx_code);
    primitive("exp_args:NNno", l3expand_base_cmd, l3exp_NNno_code);
    primitive("exp_args:NNoo", l3expand_base_cmd, l3exp_NNoo_code);
    primitive("exp_args:Nnnc", l3expand_base_cmd, l3exp_Nnnc_code);
    primitive("exp_args:Nnno", l3expand_base_cmd, l3exp_Nnno_code);
    primitive("exp_args:Nooo", l3expand_base_cmd, l3exp_Nooo_code);
    primitive("exp_args:NNnx", l3expand_base_cmd, l3exp_NNnx_code);
    primitive("exp_args:NNox", l3expand_base_cmd, l3exp_NNox_code);
    primitive("exp_args:Nnnx", l3expand_base_cmd, l3exp_Nnnx_code);
    primitive("exp_args:Nnox", l3expand_base_cmd, l3exp_Nnox_code);
    primitive("exp_args:Nccx", l3expand_base_cmd, l3exp_Nccx_code);
    primitive("exp_args:Ncnx", l3expand_base_cmd, l3exp_Ncnx_code);
    primitive("exp_args:Noox", l3expand_base_cmd, l3exp_Noox_code);
    primitive("exp_last_unbraced:NV", l3expand_base_cmd, l3exp_NVu_code);
    primitive("exp_last_unbraced:Nv", l3expand_base_cmd, l3exp_Nvu_code);
    primitive("exp_last_unbraced:No", l3expand_base_cmd, l3exp_Nou_code);
    primitive("exp_last_unbraced:Nf", l3expand_base_cmd, l3exp_Nfu_code);
    primitive("exp_last_unbraced:Nco", l3expand_base_cmd, l3exp_Ncou_code);
    primitive("exp_last_unbraced:NcV", l3expand_base_cmd, l3exp_NcVu_code);
    primitive("exp_last_unbraced:NNV", l3expand_base_cmd, l3exp_NNVu_code);
    primitive("exp_last_unbraced:NNo", l3expand_base_cmd, l3exp_NNou_code);
    primitive("exp_last_unbraced:NNNV", l3expand_base_cmd, l3exp_NNNVu_code);
    primitive("exp_last_unbraced:NNNo", l3expand_base_cmd, l3exp_NNNou_code);
    primitive("exp_last_unbraced:Nno", l3expand_base_cmd, l3exp_Nnou_code);
    primitive("exp_last_unbraced:Noo", l3expand_base_cmd, l3exp_Noou_code);
    primitive("exp_last_unbraced:Nfo", l3expand_base_cmd, l3exp_Nfou_code);
    primitive("exp_last_unbraced:NnNo", l3expand_base_cmd, l3exp_NnNou_code);
    primitive("exp_last_unbraced:Nx", l3expand_base_cmd, l3exp_Nxu_code);
    primitive("exp_last_two_unbraced:Noo", l3expand_base_cmd, l3exp_Nouou_code);
    primitive("cs_if_eq_p:NN", l3_ifx_cmd, l3_p_NN_code);
    primitive("cs_if_eq:NNTF", l3_ifx_cmd, l3_TF_NN_code);
    primitive("cs_if_eq:NNT", l3_ifx_cmd, l3_T_NN_code);
    primitive("cs_if_eq:NNF", l3_ifx_cmd, l3_F_NN_code);
    primitive("cs_if_eq_p:Nc", l3_ifx_cmd, l3_p_Nc_code);
    primitive("cs_if_eq:NcTF", l3_ifx_cmd, l3_TF_Nc_code);
    primitive("cs_if_eq:NcT", l3_ifx_cmd, l3_T_Nc_code);
    primitive("cs_if_eq:NcF", l3_ifx_cmd, l3_F_Nc_code);
    primitive("cs_if_eq_p:cN", l3_ifx_cmd, l3_p_cN_code);
    primitive("cs_if_eq:cNTF", l3_ifx_cmd, l3_TF_cN_code);
    primitive("cs_if_eq:cNT", l3_ifx_cmd, l3_T_cN_code);
    primitive("cs_if_eq:cNF", l3_ifx_cmd, l3_F_cN_code);
    primitive("cs_if_eq_p:cc", l3_ifx_cmd, l3_p_cc_code);
    primitive("cs_if_eq:ccTF", l3_ifx_cmd, l3_TF_cc_code);
    primitive("cs_if_eq:ccT", l3_ifx_cmd, l3_T_cc_code);
    primitive("cs_if_eq:ccF", l3_ifx_cmd, l3_F_cc_code);
    primitive("str_if_eq_p:nn", l3str_ifeq_cmd, l3_p_code);
    primitive("str_if_eq:nnTF", l3str_ifeq_cmd, l3_TF_code);
    primitive("str_if_eq:nnT", l3str_ifeq_cmd, l3_T_code);
    primitive("str_if_eq:nnF", l3str_ifeq_cmd, l3_F_code);
    primitive("str_if_eq_x_p:nn", l3str_ifeq_cmd, subtypes(l3_p_code + 4));
    primitive("str_if_eq_x:nnTF", l3str_ifeq_cmd, subtypes(l3_TF_code + 4));
    primitive("str_if_eq_x:nnT", l3str_ifeq_cmd, subtypes(l3_T_code + 4));
    primitive("str_if_eq_x:nnF", l3str_ifeq_cmd, subtypes(l3_F_code + 4));
    primitive("str_if_eq_p:Vn", l3str_ifeq_cmd, subtypes(l3_p_code + 8));
    primitive("str_if_eq:VnTF", l3str_ifeq_cmd, subtypes(l3_TF_code + 8));
    primitive("str_if_eq:VnT", l3str_ifeq_cmd, subtypes(l3_T_code + 8));
    primitive("str_if_eq:VnF", l3str_ifeq_cmd, subtypes(l3_F_code + 8));
    primitive("str_if_eq_p:on", l3str_ifeq_cmd, subtypes(l3_p_code + 12));
    primitive("str_if_eq:onTF", l3str_ifeq_cmd, subtypes(l3_TF_code + 12));
    primitive("str_if_eq:onT", l3str_ifeq_cmd, subtypes(l3_T_code + 12));
    primitive("str_if_eq:onF", l3str_ifeq_cmd, subtypes(l3_F_code + 12));
    primitive("str_if_eq_p:no", l3str_ifeq_cmd, subtypes(l3_p_code + 16));
    primitive("str_if_eq:noTF", l3str_ifeq_cmd, subtypes(l3_TF_code + 16));
    primitive("str_if_eq:noT", l3str_ifeq_cmd, subtypes(l3_T_code + 16));
    primitive("str_if_eq:noF", l3str_ifeq_cmd, subtypes(l3_F_code + 16));
    primitive("str_if_eq_p:nV", l3str_ifeq_cmd, subtypes(l3_p_code + 20));
    primitive("str_if_eq:nVTF", l3str_ifeq_cmd, subtypes(l3_TF_code + 20));
    primitive("str_if_eq:nVT", l3str_ifeq_cmd, subtypes(l3_T_code + 20));
    primitive("str_if_eq:nVF", l3str_ifeq_cmd, subtypes(l3_F_code + 20));
    primitive("str_if_eq_p:VV", l3str_ifeq_cmd, subtypes(l3_p_code + 24));
    primitive("str_if_eq:VVTF", l3str_ifeq_cmd, subtypes(l3_TF_code + 24));
    primitive("str_if_eq:VVT", l3str_ifeq_cmd, subtypes(l3_T_code + 24));
    primitive("str_if_eq:VVF", l3str_ifeq_cmd, subtypes(l3_F_code + 24));
    primitive("str_case:nn", l3str_case_cmd, l3_p_code);
    primitive("str_case:nnTF", l3str_case_cmd, l3_TF_code);
    primitive("str_case:nnT", l3str_case_cmd, l3_T_code);
    primitive("str_case:nnF", l3str_case_cmd, l3_F_code);
    primitive("str_case:nnn", l3str_case_cmd, l3_F_code);
    primitive("str_case_x:nn", l3str_case_cmd, subtypes(l3_p_code + 4));
    primitive("str_case_x:nnTF", l3str_case_cmd, subtypes(l3_TF_code + 4));
    primitive("str_case_x:nnT", l3str_case_cmd, subtypes(l3_T_code + 4));
    primitive("str_case_x:nnF", l3str_case_cmd, subtypes(l3_F_code + 4));
    primitive("str_case_x:nnn", l3str_case_cmd, subtypes(l3_F_code + 4));
    primitive("str_case:on", l3str_case_cmd, subtypes(l3_p_code + 8));
    primitive("str_case:onTF", l3str_case_cmd, subtypes(l3_TF_code + 8));
    primitive("str_case:onT", l3str_case_cmd, subtypes(l3_T_code + 8));
    primitive("str_case:onF", l3str_case_cmd, subtypes(l3_F_code + 8));
    primitive("str_case:onn", l3str_case_cmd, subtypes(l3_F_code + 8));
    primitive("char_set_catcode_escape:n", l3_set_cat_cmd, subtypes(escape_catcode));
    primitive("char_set_catcode_group_begin:n", l3_set_cat_cmd, subtypes(open_catcode));
    primitive("char_set_catcode_group_end:n", l3_set_cat_cmd, subtypes(close_catcode));
    primitive("char_set_catcode_math_toggle:n", l3_set_cat_cmd, subtypes(dollar_catcode));
    primitive("char_set_catcode_alignment:n", l3_set_cat_cmd, subtypes(alignment_catcode));
    primitive("char_set_catcode_end_line:n", l3_set_cat_cmd, subtypes(eol_catcode));
    primitive("char_set_catcode_parameter:n", l3_set_cat_cmd, subtypes(parameter_catcode));
    primitive("char_set_catcode_math_superscript:n", l3_set_cat_cmd, subtypes(hat_catcode));
    primitive("char_set_catcode_math_subscript:n", l3_set_cat_cmd, subtypes(underscore_catcode));
    primitive("char_set_catcode_ignore:n", l3_set_cat_cmd, subtypes(ignored_catcode));
    primitive("char_set_catcode_space:n", l3_set_cat_cmd, subtypes(space_catcode));
    primitive("char_set_catcode_letter:n", l3_set_cat_cmd, subtypes(letter_catcode));
    primitive("char_set_catcode_other:n", l3_set_cat_cmd, subtypes(other_catcode));
    primitive("char_set_catcode_active:n", l3_set_cat_cmd, subtypes(active_catcode));
    primitive("char_set_catcode_invalid:n", l3_set_cat_cmd, subtypes(invalid_catcode));
    primitive("char_set_catcode_comment:n", l3_set_cat_cmd, subtypes(comment_catcode));
    primitive("char_set_catcode_escape:N", l3_set_cat_cmd, subtypes(escape_catcode + 16));
    primitive("char_set_catcode_group_begin:N", l3_set_cat_cmd, subtypes(open_catcode + 16));
    primitive("char_set_catcode_group_end:N", l3_set_cat_cmd, subtypes(close_catcode + 16));
    primitive("char_set_catcode_math_toggle:N", l3_set_cat_cmd, subtypes(dollar_catcode + 16));
    primitive("char_set_catcode_alignment:N", l3_set_cat_cmd, subtypes(alignment_catcode + 16));
    primitive("char_set_catcode_end_line:N", l3_set_cat_cmd, subtypes(eol_catcode + 16));
    primitive("char_set_catcode_parameter:N", l3_set_cat_cmd, subtypes(parameter_catcode + 16));
    primitive("char_set_catcode_math_superscript:N", l3_set_cat_cmd, subtypes(hat_catcode + 16));
    primitive("char_set_catcode_math_subscript:N", l3_set_cat_cmd, subtypes(underscore_catcode + 16));
    primitive("char_set_catcode_ignore:N", l3_set_cat_cmd, subtypes(ignored_catcode + 16));
    primitive("char_set_catcode_space:N", l3_set_cat_cmd, subtypes(space_catcode + 16));
    primitive("char_set_catcode_letter:N", l3_set_cat_cmd, subtypes(letter_catcode + 16));
    primitive("char_set_catcode_other:N", l3_set_cat_cmd, subtypes(other_catcode + 16));
    primitive("char_set_catcode_active:N", l3_set_cat_cmd, subtypes(active_catcode + 16));
    primitive("char_set_catcode_invalid:N", l3_set_cat_cmd, subtypes(invalid_catcode + 16));
    primitive("char_set_catcode_comment:N", l3_set_cat_cmd, subtypes(comment_catcode + 16));
    primitive("char_set_catcode:nn", l3_set_num_cmd, setcat_code);
    primitive("char_value_catcode:n", l3E_set_num_cmd, thecat_code);
    primitive("char_show_value_catcode:n", l3_set_num_cmd, showcat_code);
    primitive("char_set_mathcode:nn", l3_set_num_cmd, setmath_code);
    primitive("char_value_mathcode:n", l3E_set_num_cmd, themath_code);
    primitive("char_show_value_mathcode:n", l3_set_num_cmd, showmath_code);
    primitive("char_set_lccode:nn", l3_set_num_cmd, setlc_code);
    primitive("char_value_lccode:n", l3E_set_num_cmd, thelc_code);
    primitive("char_show_value_lccode:n", l3_set_num_cmd, showlc_code);
    primitive("char_set_uccode:nn", l3_set_num_cmd, setuc_code);
    primitive("char_value_uccode:n", l3E_set_num_cmd, theuc_code);
    primitive("char_show_value_uccode:n", l3_set_num_cmd, showuc_code);
    primitive("char_set_sfcode:nn", l3_set_num_cmd, setsf_code);
    primitive("char_value_sfcode:n", l3E_set_num_cmd, thesf_code);
    primitive("char_show_value_sfcode:n", l3_set_num_cmd, showsf_code);
    primitive("c_group_begin_token", open_catcode, subtypes('{'));
    primitive("c_group_end_token", close_catcode, subtypes('}'));
    primitive("c_math_toggle_token", dollar_catcode, subtypes('*'));
    primitive("c_alignment_token", alignment_catcode, subtypes('*'));
    primitive("c_parameter_token", parameter_catcode, subtypes('#'));
    primitive("c_math_superscript_token", hat_catcode, subtypes('^'));
    primitive("c_math_subscript_token", underscore_catcode, subtypes('*'));
    primitive("c_space_token", space_catcode, subtypes('~'));
    primitive("c_catcode_letter_token", letter_catcode, subtypes('a'));
    primitive("c_catcode_other_token", other_catcode, subtypes('1'));
    primitive("token_if_group_begin_p:N", cat_ifeq_cmd, subtypes(open_catcode * 4 + l3_p_code));
    primitive("token_if_group_begin:NTF", cat_ifeq_cmd, subtypes(open_catcode * 4 + l3_TF_code));
    primitive("token_if_group_begin:NT", cat_ifeq_cmd, subtypes(open_catcode * 4 + l3_T_code));
    primitive("token_if_group_begin:NF", cat_ifeq_cmd, subtypes(open_catcode * 4 + l3_F_code));
    primitive("token_if_group_end_p:N", cat_ifeq_cmd, subtypes(close_catcode * 4 + l3_p_code));
    primitive("token_if_group_end:NTF", cat_ifeq_cmd, subtypes(close_catcode * 4 + l3_TF_code));
    primitive("token_if_group_end:NT", cat_ifeq_cmd, subtypes(close_catcode * 4 + l3_T_code));
    primitive("token_if_group_end:NF", cat_ifeq_cmd, subtypes(close_catcode * 4 + l3_F_code));
    primitive("token_if_math_toggle_p:N", cat_ifeq_cmd, subtypes(dollar_catcode * 4 + l3_p_code));
    primitive("token_if_math_toggle:NTF", cat_ifeq_cmd, subtypes(dollar_catcode * 4 + l3_TF_code));
    primitive("token_if_math_toggle:NT", cat_ifeq_cmd, subtypes(dollar_catcode * 4 + l3_T_code));
    primitive("token_if_math_toggle:NF", cat_ifeq_cmd, subtypes(dollar_catcode * 4 + l3_F_code));
    primitive("token_if_alignment_p:N", cat_ifeq_cmd, subtypes(alignment_catcode * 4 + l3_p_code));
    primitive("token_if_alignment:NTF", cat_ifeq_cmd, subtypes(alignment_catcode * 4 + l3_TF_code));
    primitive("token_if_alignment:NT", cat_ifeq_cmd, subtypes(alignment_catcode * 4 + l3_T_code));
    primitive("token_if_alignment:NF", cat_ifeq_cmd, subtypes(alignment_catcode * 4 + l3_F_code));
    primitive("token_if_parameter_p:N", cat_ifeq_cmd, subtypes(parameter_catcode * 4 + l3_p_code));
    primitive("token_if_parameter:NTF", cat_ifeq_cmd, subtypes(parameter_catcode * 4 + l3_TF_code));
    primitive("token_if_parameter:NT", cat_ifeq_cmd, subtypes(parameter_catcode * 4 + l3_T_code));
    primitive("token_if_parameter:NF", cat_ifeq_cmd, subtypes(parameter_catcode * 4 + l3_F_code));
    primitive("token_if_math_superscript_p:N", cat_ifeq_cmd, subtypes(hat_catcode * 4 + l3_p_code));
    primitive("token_if_math_superscript:NTF", cat_ifeq_cmd, subtypes(hat_catcode * 4 + l3_TF_code));
    primitive("token_if_math_superscript:NT", cat_ifeq_cmd, subtypes(hat_catcode * 4 + l3_T_code));
    primitive("token_if_math_superscript:NF", cat_ifeq_cmd, subtypes(hat_catcode * 4 + l3_F_code));
    primitive("token_if_math_subscript_p:N", cat_ifeq_cmd, subtypes(underscore_catcode * 4 + l3_p_code));
    primitive("token_if_math_subscript:NTF", cat_ifeq_cmd, subtypes(underscore_catcode * 4 + l3_TF_code));
    primitive("token_if_math_subscript:NT", cat_ifeq_cmd, subtypes(underscore_catcode * 4 + l3_T_code));
    primitive("token_if_math_subscript:NF", cat_ifeq_cmd, subtypes(underscore_catcode * 4 + l3_F_code));
    primitive("token_if_space_p:N", cat_ifeq_cmd, subtypes(space_catcode * 4 + l3_p_code));
    primitive("token_if_space:NTF", cat_ifeq_cmd, subtypes(space_catcode * 4 + l3_TF_code));
    primitive("token_if_space:NT", cat_ifeq_cmd, subtypes(space_catcode * 4 + l3_T_code));
    primitive("token_if_space:NF", cat_ifeq_cmd, subtypes(space_catcode * 4 + l3_F_code));
    primitive("token_if_other_p:N", cat_ifeq_cmd, subtypes(other_catcode * 4 + l3_p_code));
    primitive("token_if_other:NTF", cat_ifeq_cmd, subtypes(other_catcode * 4 + l3_TF_code));
    primitive("token_if_other:NT", cat_ifeq_cmd, subtypes(other_catcode * 4 + l3_T_code));
    primitive("token_if_other:NF", cat_ifeq_cmd, subtypes(other_catcode * 4 + l3_F_code));
    primitive("token_if_letter_p:N", cat_ifeq_cmd, subtypes(letter_catcode * 4 + l3_p_code));
    primitive("token_if_letter:NTF", cat_ifeq_cmd, subtypes(letter_catcode * 4 + l3_TF_code));
    primitive("token_if_letter:NT", cat_ifeq_cmd, subtypes(letter_catcode * 4 + l3_T_code));
    primitive("token_if_letter:NF", cat_ifeq_cmd, subtypes(letter_catcode * 4 + l3_F_code));
    primitive("token_if_active_p:N", cat_ifeq_cmd, subtypes(active_catcode * 4 + l3_p_code));
    primitive("token_if_active:NTF", cat_ifeq_cmd, subtypes(active_catcode * 4 + l3_TF_code));
    primitive("token_if_active:NT", cat_ifeq_cmd, subtypes(active_catcode * 4 + l3_T_code));
    primitive("token_if_active:NF", cat_ifeq_cmd, subtypes(active_catcode * 4 + l3_F_code));
    primitive("token_if_eq_catcode_p:NN", token_if_cmd, subtypes(tok_eq_cat_code * 4 + l3_p_code));
    primitive("token_if_eq_charcode_p:NN", token_if_cmd, subtypes(tok_eq_char_code * 4 + l3_p_code));
    primitive("token_if_eq_meaning_p:NN", token_if_cmd, subtypes(tok_eq_meaning_code * 4 + l3_p_code));
    primitive("token_if_macro_p:N", token_if_cmd, subtypes(tok_if_macro_code * 4 + l3_p_code));
    primitive("token_if_cs_p:N", token_if_cmd, subtypes(tok_if_cs_code * 4 + l3_p_code));
    primitive("token_if_expandable_p:N", token_if_cmd, subtypes(tok_if_expandable_code * 4 + l3_p_code));
    primitive("token_if_long_macro_p:N", token_if_cmd, subtypes(tok_if_long_code * 4 + l3_p_code));
    primitive("token_if_protected_macro_p:N", token_if_cmd, subtypes(tok_if_prot_code * 4 + l3_p_code));
    primitive("token_if_protected_long_macro_p:N", token_if_cmd, subtypes(tok_if_longprot_code * 4 + l3_p_code));
    primitive("token_if_chardef_p:N", token_if_cmd, subtypes(tok_if_chardef_code * 4 + l3_p_code));
    primitive("token_if_mathchardef_p:N", token_if_cmd, subtypes(tok_if_mathchardef_code * 4 + l3_p_code));
    primitive("token_if_dim_register_p:N", token_if_cmd, subtypes(tok_if_dim_code * 4 + l3_p_code));
    primitive("token_if_int_register_p:N", token_if_cmd, subtypes(tok_if_int_code * 4 + l3_p_code));
    primitive("token_if_muskip_register_p:N", token_if_cmd, subtypes(tok_if_muskip_code * 4 + l3_p_code));
    primitive("token_if_skip_register_p:N", token_if_cmd, subtypes(tok_if_skip_code * 4 + l3_p_code));
    primitive("token_if_toks_register_p:N", token_if_cmd, subtypes(tok_if_toks_code * 4 + l3_p_code));
    primitive("token_if_primitive_p:N", token_if_cmd, subtypes(tok_if_primitive_code * 4 + l3_p_code));
    primitive("token_if_eq_catcode:NNTF", token_if_cmd, subtypes(tok_eq_cat_code * 4 + l3_TF_code));
    primitive("token_if_eq_charcode:NNTF", token_if_cmd, subtypes(tok_eq_char_code * 4 + l3_TF_code));
    primitive("token_if_eq_meaning:NNTF", token_if_cmd, subtypes(tok_eq_meaning_code * 4 + l3_TF_code));
    primitive("token_if_macro:NTF", token_if_cmd, subtypes(tok_if_macro_code * 4 + l3_TF_code));
    primitive("token_if_cs:NTF", token_if_cmd, subtypes(tok_if_cs_code * 4 + l3_TF_code));
    primitive("token_if_expandable:NTF", token_if_cmd, subtypes(tok_if_expandable_code * 4 + l3_TF_code));
    primitive("token_if_long_macro:NTF", token_if_cmd, subtypes(tok_if_long_code * 4 + l3_TF_code));
    primitive("token_if_protected_macro:NTF", token_if_cmd, subtypes(tok_if_prot_code * 4 + l3_TF_code));
    primitive("token_if_protected_long_macro:NTF", token_if_cmd, subtypes(tok_if_longprot_code * 4 + l3_TF_code));
    primitive("token_if_chardef:NTF", token_if_cmd, subtypes(tok_if_chardef_code * 4 + l3_TF_code));
    primitive("token_if_mathchardef:NTF", token_if_cmd, subtypes(tok_if_mathchardef_code * 4 + l3_TF_code));
    primitive("token_if_dim_register:NTF", token_if_cmd, subtypes(tok_if_dim_code * 4 + l3_TF_code));
    primitive("token_if_int_register:NTF", token_if_cmd, subtypes(tok_if_int_code * 4 + l3_TF_code));
    primitive("token_if_muskip_register:NTF", token_if_cmd, subtypes(tok_if_muskip_code * 4 + l3_TF_code));
    primitive("token_if_skip_register:NTF", token_if_cmd, subtypes(tok_if_skip_code * 4 + l3_TF_code));
    primitive("token_if_toks_register:NTF", token_if_cmd, subtypes(tok_if_toks_code * 4 + l3_TF_code));
    primitive("token_if_primitive:NTF", token_if_cmd, subtypes(tok_if_primitive_code * 4 + l3_TF_code));
    primitive("token_if_eq_catcode:NNT", token_if_cmd, subtypes(tok_eq_cat_code * 4 + l3_T_code));
    primitive("token_if_eq_charcode:NNT", token_if_cmd, subtypes(tok_eq_char_code * 4 + l3_T_code));
    primitive("token_if_eq_meaning:NNT", token_if_cmd, subtypes(tok_eq_meaning_code * 4 + l3_T_code));
    primitive("token_if_macro:NT", token_if_cmd, subtypes(tok_if_macro_code * 4 + l3_T_code));
    primitive("token_if_cs:NT", token_if_cmd, subtypes(tok_if_cs_code * 4 + l3_T_code));
    primitive("token_if_expandable:NT", token_if_cmd, subtypes(tok_if_expandable_code * 4 + l3_T_code));
    primitive("token_if_long_macro:NT", token_if_cmd, subtypes(tok_if_long_code * 4 + l3_T_code));
    primitive("token_if_protected_macro:NT", token_if_cmd, subtypes(tok_if_prot_code * 4 + l3_T_code));
    primitive("token_if_protected_long_macro:NT", token_if_cmd, subtypes(tok_if_longprot_code * 4 + l3_T_code));
    primitive("token_if_chardef:NT", token_if_cmd, subtypes(tok_if_chardef_code * 4 + l3_T_code));
    primitive("token_if_mathchardef:NT", token_if_cmd, subtypes(tok_if_mathchardef_code * 4 + l3_T_code));
    primitive("token_if_dim_register:NT", token_if_cmd, subtypes(tok_if_dim_code * 4 + l3_T_code));
    primitive("token_if_int_register:NT", token_if_cmd, subtypes(tok_if_int_code * 4 + l3_T_code));
    primitive("token_if_muskip_register:NT", token_if_cmd, subtypes(tok_if_muskip_code * 4 + l3_T_code));
    primitive("token_if_skip_register:NT", token_if_cmd, subtypes(tok_if_skip_code * 4 + l3_T_code));
    primitive("token_if_toks_register:NT", token_if_cmd, subtypes(tok_if_toks_code * 4 + l3_T_code));
    primitive("token_if_primitive:NT", token_if_cmd, subtypes(tok_if_primitive_code * 4 + l3_T_code));
    primitive("token_if_eq_catcode:NNF", token_if_cmd, subtypes(tok_eq_cat_code * 4 + l3_F_code));
    primitive("token_if_eq_charcode:NNF", token_if_cmd, subtypes(tok_eq_char_code * 4 + l3_F_code));
    primitive("token_if_eq_meaning:NNF", token_if_cmd, subtypes(tok_eq_meaning_code * 4 + l3_F_code));
    primitive("token_if_macro:NF", token_if_cmd, subtypes(tok_if_macro_code * 4 + l3_F_code));
    primitive("token_if_cs:NF", token_if_cmd, subtypes(tok_if_cs_code * 4 + l3_F_code));
    primitive("token_if_expandable:NF", token_if_cmd, subtypes(tok_if_expandable_code * 4 + l3_F_code));
    primitive("token_if_long_macro:NF", token_if_cmd, subtypes(tok_if_long_code * 4 + l3_F_code));
    primitive("token_if_protected_macro:NF", token_if_cmd, subtypes(tok_if_prot_code * 4 + l3_F_code));
    primitive("token_if_protected_long_macro:NF", token_if_cmd, subtypes(tok_if_longprot_code * 4 + l3_F_code));
    primitive("token_if_chardef:NF", token_if_cmd, subtypes(tok_if_chardef_code * 4 + l3_F_code));
    primitive("token_if_mathchardef:NF", token_if_cmd, subtypes(tok_if_mathchardef_code * 4 + l3_F_code));
    primitive("token_if_dim_register:NF", token_if_cmd, subtypes(tok_if_dim_code * 4 + l3_F_code));
    primitive("token_if_int_register:NF", token_if_cmd, subtypes(tok_if_int_code * 4 + l3_F_code));
    primitive("token_if_muskip_register:NF", token_if_cmd, subtypes(tok_if_muskip_code * 4 + l3_F_code));
    primitive("token_if_skip_register:NF", token_if_cmd, subtypes(tok_if_skip_code * 4 + l3_F_code));
    primitive("token_if_toks_register:NF", token_if_cmd, subtypes(tok_if_toks_code * 4 + l3_F_code));
    primitive("token_if_primitive:NF", token_if_cmd, subtypes(tok_if_primitive_code * 4 + l3_F_code));
    primitive("tl_new:N", tl_basic_cmd, l3_tl_new_code);
    primitive("tl_clear:N", tl_basic_cmd, l3_tl_clear_code);
    primitive("tl_gclear:N", tl_basic_cmd, l3_tl_gclear_code);
    primitive("tl_const:Nn", tl_basic_cmd, l3_tl_const_code);
    primitive("tl_const:Nx", tl_basic_cmd, l3_tl_xconst_code);
    primitive("tl_clear_new:N", tl_basic_cmd, l3_tl_clearnew_code);
    primitive("tl_gclear_new:N", tl_basic_cmd, l3_tl_gclearnew_code);
    primitive("tl_new:c", tl_basic_cmd, l3_tlx_new_code);
    primitive("tl_clear:c", tl_basic_cmd, l3_tlx_clear_code);
    primitive("tl_gclear:c", tl_basic_cmd, l3_tlx_gclear_code);
    primitive("tl_const:cn", tl_basic_cmd, l3_tlx_const_code);
    primitive("tl_const:cx", tl_basic_cmd, l3_tlx_xconst_code);
    primitive("tl_clear_new:c", tl_basic_cmd, l3_tlx_clearnew_code);
    primitive("tl_gclear_new:c", tl_basic_cmd, l3_tlx_gclearnew_code);
    primitive("tl_concat:NNN", tl_concat_cmd, zero_code);
    primitive("tl_concat:ccc", tl_concat_cmd, one_code);
    primitive("tl_gconcat:NNN", tl_concat_cmd, two_code);
    primitive("tl_gconcat:ccc", tl_concat_cmd, three_code);
    primitive("tl_set:Nn", tl_set_cmd, l3expn_code);
    primitive("tl_set:No", tl_set_cmd, l3expo_code);
    primitive("tl_set:Nf", tl_set_cmd, l3expf_code);
    primitive("tl_set:Nx", tl_set_cmd, l3expx_code);
    primitive("tl_set:NV", tl_set_cmd, l3expV_code);
    primitive("tl_set:Nv", tl_set_cmd, l3expv_code);
    primitive("tl_set:cn", tl_set_cmd, subtypes(l3expn_code + 9));
    primitive("tl_set:co", tl_set_cmd, subtypes(l3expo_code + 9));
    primitive("tl_set:cf", tl_set_cmd, subtypes(l3expf_code + 9));
    primitive("tl_set:cx", tl_set_cmd, subtypes(l3expx_code + 9));
    primitive("tl_set:cV", tl_set_cmd, subtypes(l3expV_code + 9));
    primitive("tl_set:cv", tl_set_cmd, subtypes(l3expv_code + 9));
    primitive("tl_gset:Nn", tl_set_cmd, subtypes(l3expn_code + 18));
    primitive("tl_gset:No", tl_set_cmd, subtypes(l3expo_code + 18));
    primitive("tl_gset:Nf", tl_set_cmd, subtypes(l3expf_code + 18));
    primitive("tl_gset:Nx", tl_set_cmd, subtypes(l3expx_code + 18));
    primitive("tl_gset:NV", tl_set_cmd, subtypes(l3expV_code + 18));
    primitive("tl_gset:Nv", tl_set_cmd, subtypes(l3expv_code + 18));
    primitive("tl_gset:cn", tl_set_cmd, subtypes(l3expn_code + 9 + 18));
    primitive("tl_gset:co", tl_set_cmd, subtypes(l3expo_code + 9 + 18));
    primitive("tl_gset:cf", tl_set_cmd, subtypes(l3expf_code + 9 + 18));
    primitive("tl_gset:cx", tl_set_cmd, subtypes(l3expx_code + 9 + 18));
    primitive("tl_gset:cV", tl_set_cmd, subtypes(l3expV_code + 9 + 18));
    primitive("tl_gset:cv", tl_set_cmd, subtypes(l3expv_code + 9 + 18));

    primitive("tl_put_left:Nn", tl_put_left_cmd, l3expn_code);
    primitive("tl_put_left:No", tl_put_left_cmd, l3expo_code);
    primitive("tl_put_left:Nx", tl_put_left_cmd, l3expx_code);
    primitive("tl_put_left:NV", tl_put_left_cmd, l3expV_code);
    primitive("tl_put_left:cn", tl_put_left_cmd, subtypes(l3expn_code + 9));
    primitive("tl_put_left:co", tl_put_left_cmd, subtypes(l3expo_code + 9));
    primitive("tl_put_left:cx", tl_put_left_cmd, subtypes(l3expx_code + 9));
    primitive("tl_put_left:cV", tl_put_left_cmd, subtypes(l3expV_code + 9));
    primitive("tl_gput_left:Nn", tl_put_left_cmd, subtypes(l3expn_code + 18));
    primitive("tl_gput_left:No", tl_put_left_cmd, subtypes(l3expo_code + 18));
    primitive("tl_gput_left:Nx", tl_put_left_cmd, subtypes(l3expx_code + 18));
    primitive("tl_gput_left:NV", tl_put_left_cmd, subtypes(l3expV_code + 18));
    primitive("tl_gput_left:cn", tl_put_left_cmd, subtypes(l3expn_code + 9 + 18));
    primitive("tl_gput_left:co", tl_put_left_cmd, subtypes(l3expo_code + 9 + 18));
    primitive("tl_gput_left:cx", tl_put_left_cmd, subtypes(l3expx_code + 9 + 18));
    primitive("tl_gput_left:cV", tl_put_left_cmd, subtypes(l3expV_code + 9 + 18));
    primitive("tl_put_right:Nn", tl_put_left_cmd, subtypes(l3expn_code + 36));
    primitive("tl_put_right:No", tl_put_left_cmd, subtypes(l3expo_code + 36));
    primitive("tl_put_right:Nx", tl_put_left_cmd, subtypes(l3expx_code + 36));
    primitive("tl_put_right:NV", tl_put_left_cmd, subtypes(l3expV_code + 36));
    primitive("tl_put_right:cn", tl_put_left_cmd, subtypes(l3expn_code + 9 + 36));
    primitive("tl_put_right:co", tl_put_left_cmd, subtypes(l3expo_code + 9 + 36));
    primitive("tl_put_right:cx", tl_put_left_cmd, subtypes(l3expx_code + 9 + 36));
    primitive("tl_put_right:cV", tl_put_left_cmd, subtypes(l3expV_code + 9 + 36));
    primitive("tl_gput_right:Nn", tl_put_left_cmd, subtypes(l3expn_code + 18 + 36));
    primitive("tl_gput_right:No", tl_put_left_cmd, subtypes(l3expo_code + 18 + 36));
    primitive("tl_gput_right:Nx", tl_put_left_cmd, subtypes(l3expx_code + 18 + 36));
    primitive("tl_gput_right:NV", tl_put_left_cmd, subtypes(l3expV_code + 18 + 36));
    primitive("tl_gput_right:cn", tl_put_left_cmd, subtypes(l3expn_code + 9 + 18 + 36));
    primitive("tl_gput_right:co", tl_put_left_cmd, subtypes(l3expo_code + 9 + 18 + 36));
    primitive("tl_gput_right:cx", tl_put_left_cmd, subtypes(l3expx_code + 9 + 18 + 36));
    primitive("tl_gput_right:cV", tl_put_left_cmd, subtypes(l3expV_code + 9 + 18 + 36));
    primitive("tl_set_rescan:Nnn", l3_rescan_cmd, subtypes(0));
    primitive("tl_set_rescan:Nno", l3_rescan_cmd, subtypes(1));
    primitive("tl_set_rescan:Nnx", l3_rescan_cmd, subtypes(2));
    primitive("tl_set_rescan:cnn", l3_rescan_cmd, subtypes(3));
    primitive("tl_set_rescan:cno", l3_rescan_cmd, subtypes(4));
    primitive("tl_set_rescan:cnx", l3_rescan_cmd, subtypes(5));
    primitive("tl_gset_rescan:Nnn", l3_rescan_cmd, subtypes(6));
    primitive("tl_gset_rescan:Nno", l3_rescan_cmd, subtypes(7));
    primitive("tl_gset_rescan:Nnx", l3_rescan_cmd, subtypes(8));
    primitive("tl_gset_rescan:cnn", l3_rescan_cmd, subtypes(9));
    primitive("tl_gset_rescan:cno", l3_rescan_cmd, subtypes(10));
    primitive("tl_gset_rescan:cnx", l3_rescan_cmd, subtypes(11));
    primitive("tl_rescan:nn", l3_rescan_cmd, subtypes(12));
    primitive("tl_to_lowercase:n", case_shift_cmd, subtypes(6));
    primitive("tl_to_uppercase:n", case_shift_cmd, subtypes(7));
}

void Hashtab::boot_etex() {
    primitive("TeXXeTstate", assign_int_cmd, TeXXetstate_code);
    primitive("tracingassigns", assign_int_cmd, tracingassigns_code);
    primitive("tracinggroups", assign_int_cmd, tracinggroups_code);
    primitive("tracingifs", assign_int_cmd, tracingifs_code);
    primitive("tracingscantokens", assign_int_cmd, tracingscantokens_code);
    primitive("tracingnesting", assign_int_cmd, tracingnesting_code);
    primitive("predisplaydirection", assign_int_cmd, predisplaydirection_code);
    primitive("lastlinefit", assign_int_cmd, lastlinefit_code);
    primitive("savingdiscards", assign_int_cmd, savingdiscards_code);
    primitive("savinghyphcodes", assign_int_cmd, savinghyphcodes_code);
    primitive("currentgrouplevel", last_item_cmd, currentgrouplevel_code);
    primitive("currentgrouptype", last_item_cmd, currentgrouptype_code);
    primitive("currentiflevel", last_item_cmd, currentiflevel_code);
    primitive("currentiftype", last_item_cmd, currentiftype_code);
    primitive("currentifbranch", last_item_cmd, currentifbranch_code);
    primitive("eTeXversion", last_item_cmd, etexversion_code);
    primitive("lastnodetype", last_item_cmd, lastnodetype_code);
    primitive("fontcharwd", last_item_cmd, fontcharwd_code);
    primitive("fontcharht", last_item_cmd, fontcharht_code);
    primitive("fontchardp", last_item_cmd, fontchardp_code);
    primitive("fontcharic", last_item_cmd, fontcharic_code);
    primitive("parshapelength", last_item_cmd, parshapelength_code);
    primitive("parshapeindent", last_item_cmd, parshapeindent_code);
    primitive("parshapedimen", last_item_cmd, parshapedimen_code);
    primitive("numexpr", last_item_cmd, numexpr_code);
    primitive("dimexpr", last_item_cmd, dimexpr_code);
    primitive("glueexpr", last_item_cmd, glueexpr_code);
    primitive("muexpr", last_item_cmd, muexpr_code);
    primitive("gluestretchorder", last_item_cmd, gluestretchorder_code);
    primitive("glueshrinkorder", last_item_cmd, glueshrinkorder_code);
    primitive("gluestretch", last_item_cmd, gluestretch_code);
    primitive("glueshrink", last_item_cmd, glueshrink_code);
    primitive("gluetomu", last_item_cmd, gluetomu_code);
    primitive("mutoglue", last_item_cmd, mutoglue_code);
    primitive("eTeXrevision", convert_cmd, etexrevision_code);
    primitive("ifcsname", if_test_cmd, if_csname_code);
    primitive("ifdefined", if_test_cmd, if_defined_code);
    primitive("iffontchar", if_test_cmd, if_fontchar_code);
    primitive("unless", expandafter_cmd, one_code);
    primitive("unexpanded", the_cmd, unexpanded_code);
    primitive("detokenize", the_cmd, detokenize_code);
    primitive("scantokens", input_cmd, scantokens_code);
    primitive("showgroups", xray_cmd, showgroups_code);
    primitive("showtokens", xray_cmd, showtokens_code);
    primitive("showifs", xray_cmd, showifs_code);
    primitive("interactionmode", set_page_int_cmd, interactionmode_code);
    primitive("pagediscards", ignore_cmd, pagediscards_code);
    primitive("splitdiscards", ignore_cmd, splitdiscards_code);
    primitive("endL", ignore_cmd, endL_code);
    primitive("endR", ignore_cmd, endR_code);
    primitive("beginL", ignore_cmd, beginL_code);
    primitive("beginR", ignore_cmd, beginR_code);
    primitive("readline", read_to_cs_cmd, one_code);
    primitive("topmarks", top_bot_mark_cmd, topmarks_code);
    primitive("firstmarks", top_bot_mark_cmd, firstmarks_code);
    primitive("botmarks", top_bot_mark_cmd, botmarks_code);
    primitive("splitfirstmarks", top_bot_mark_cmd, splitfirstmarks_code);
    primitive("splitbotmarks", top_bot_mark_cmd, splitbotmarks_code);
    primitive("everyeof", assign_toks_cmd, everyeof_code);
    primitive("protected", prefix_cmd, protected_code);
    primitive("middle", etex_cmd, subtypes(18));
    primitive("marks", specimp_cmd, marks_code);
    primitive("interlinepenalties", set_shape_cmd, interlinepenalties_code);
    primitive("clubpenalties", set_shape_cmd, clubpenalties_code);
    primitive("widowpenalties", set_shape_cmd, widowpenalties_code);
    primitive("displaywidowpenalties", set_shape_cmd, displaywidowpenalties_code);
}

void Hashtab::boot_keyval() {
    static bool booted = false;
    if (booted) return;
    booted       = true;
    xkv_cc_token = primitive("XKV@cc", xkeyval_cmd, define_cc_code);
    primitive("define@key", xkeyval_cmd, xdefinekey_code);
    primitive("define@cmdkey", xkeyval_cmd, define_cmdkey_code);
    primitive("define@cmdkeys", xkeyval_cmd, define_cmdkeys_code);
    primitive("define@boolkey", xkeyval_cmd, define_boolkey_code);
    primitive("define@boolkeys", xkeyval_cmd, define_boolkeys_code);
    primitive("define@choicekey", xkeyval_cmd, define_choicekey_code);
    primitive("key@ifundefined", xkeyval_cmd, key_ifundefined_code);
    primitive("disable@keys", xkeyval_cmd, disable_keys_code);
    primitive("presetkeys", xkeyval_cmd, preset_keys_code);
    primitive("gpresetkeys", xkeyval_cmd, gpreset_keys_code);
    primitive("unpresetkeys", xkeyval_cmd, unpreset_keys_code);
    primitive("gunpresetkeys", xkeyval_cmd, gunpreset_keys_code);
    primitive("delpresetkeys", xkeyval_cmd, delpreset_keys_code);
    primitive("gdelpresetkeys", xkeyval_cmd, gdelpreset_keys_code);
    primitive("savekeys", xkeyval_cmd, save_keys_code);
    primitive("gsavekeys", xkeyval_cmd, gsave_keys_code);
    primitive("unsavekeys", xkeyval_cmd, unsave_keys_code);
    primitive("gunsavekeys", xkeyval_cmd, gunsave_keys_code);
    primitive("delsavekeys", xkeyval_cmd, delsave_keys_code);
    primitive("gdelsavekeys", xkeyval_cmd, gdelsave_keys_code);
    primitive("setkeys", xkeyval_cmd, setkeys_code);
    primitive("setrmkeys", xkeyval_cmd, setrmkeys_code);
    primitive("DeclareOptionX", xkeyval_cmd, declare_optionsX_code);
    primitive("ExecuteOptionsX", xkeyval_cmd, execute_optionsX_code);
    primitive("ProcessOptionsX", xkeyval_cmd, process_optionsX_code);
    savevalue_token  = locate("savevalue");
    gsavevalue_token = locate("gsavevalue");
    xkv_resa_token   = locate("XKV@resa");
    xkv_warn_token   = locate("XKV@warn");
    xkv_prefix_token = locate("XKV@prefix");
    xkv_fams_token   = locate("XKV@fams");
    xkv_na_token     = locate("XKV@na");
    xkv_rm_token     = locate("XKV@rm");
    xkv_tfam_token   = locate("XKV@tfam");
    xkv_header_token = locate("XKV@header");
    xkv_tkey_token   = locate("XKV@tkey");
}
